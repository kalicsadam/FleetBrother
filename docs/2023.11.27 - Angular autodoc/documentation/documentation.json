{
    "pipes": [],
    "interfaces": [
        {
            "name": "AlertBase",
            "id": "interface-AlertBase-71aaf9f5a8247607dcc5aa0ffae12608fe79ada2e619c02f3ab543c187114d0bbec52cfa36ee06d53b7228f931b5cc1dfebc091bf7f0f82d098b6a9edfb31791",
            "file": "src/app/data/dto/alert.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertBase {\r\n    id: number,\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlert extends AlertBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlert extends AlertBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlert extends AlertBase{\r\n    forbiddenValue: number | boolean | string,\r\n}\r\n\r\nexport interface ExistsValueAlert extends AlertBase{\r\n    exists: boolean,\r\n}\r\nexport type Alert = MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert;",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "keyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AlertCreationRequestBodyBase",
            "id": "interface-AlertCreationRequestBodyBase-393cd2defa8c9a1d72cd327a39a6b9fb2729c03f8c02876194da76b436ad8eb6a9f85885805275afcf332bab2ec0e31e63574bf7488709a3f4db705bff4262e6",
            "file": "src/app/data/requestbody/alert-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertCreationRequestBodyBase {\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    forbiddenValue: string,\r\n}\r\n\r\nexport interface ExistsValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    exists: boolean,\r\n}\r\n\r\nexport type AlertCreationRequestBody = MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody;",
            "properties": [
                {
                    "name": "keyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Car",
            "id": "interface-Car-fc36f5f3a32bd654af883e453449d621e0f36ba4dabdd115ae2407f3474a75ecb55ebdac9ef14d7c679fe08c463c2235120c78e160c0cb45ab604affc838a6e5",
            "file": "src/app/data/dto/car.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Car {\r\n    id: number,\r\n    name : string,\r\n    licensePlate : string,\r\n    vin : string\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "licensePlate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "vin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ExistsValueAlert",
            "id": "interface-ExistsValueAlert-71aaf9f5a8247607dcc5aa0ffae12608fe79ada2e619c02f3ab543c187114d0bbec52cfa36ee06d53b7228f931b5cc1dfebc091bf7f0f82d098b6a9edfb31791",
            "file": "src/app/data/dto/alert.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertBase {\r\n    id: number,\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlert extends AlertBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlert extends AlertBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlert extends AlertBase{\r\n    forbiddenValue: number | boolean | string,\r\n}\r\n\r\nexport interface ExistsValueAlert extends AlertBase{\r\n    exists: boolean,\r\n}\r\nexport type Alert = MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert;",
            "properties": [
                {
                    "name": "exists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertBase"
            ]
        },
        {
            "name": "ExistsValueAlertCreationRequestBody",
            "id": "interface-ExistsValueAlertCreationRequestBody-393cd2defa8c9a1d72cd327a39a6b9fb2729c03f8c02876194da76b436ad8eb6a9f85885805275afcf332bab2ec0e31e63574bf7488709a3f4db705bff4262e6",
            "file": "src/app/data/requestbody/alert-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertCreationRequestBodyBase {\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    forbiddenValue: string,\r\n}\r\n\r\nexport interface ExistsValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    exists: boolean,\r\n}\r\n\r\nexport type AlertCreationRequestBody = MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody;",
            "properties": [
                {
                    "name": "exists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertCreationRequestBodyBase"
            ]
        },
        {
            "name": "Field",
            "id": "interface-Field-06a4832d1378fc589c5a80d93d5eb70134f3e3fea64a07dd0a4bd41fe167c553d5b54058eff8a9d59fc10e25c39e0edf3d95944efa7aac0d8daf46078587962e",
            "file": "src/app/data/dto/field.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum FieldType {\r\n    NUMBER = \"number\",\r\n    STRING = \"string\",\r\n    BOOLEAN = \"boolean\",\r\n    LIST = \"list\"\r\n}\r\n\r\nexport interface Field {\r\n    id : number,\r\n    type : FieldType,\r\n    elementType : FieldType | null,\r\n    key : string\r\n}",
            "properties": [
                {
                    "name": "elementType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldType | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FieldCreationRequestBody",
            "id": "interface-FieldCreationRequestBody-aa2b07ff2d2cb1aa2e1fe60c7408be20c484026e2b0055efd25832bd9d327e1583d5106b414ce07ee7434cb8bde63fd8ab364fabf42f3d0e24d96246c58a54a4",
            "file": "src/app/data/requestbody/field-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FieldType } from \"../dto/field.dto\";\r\n\r\nexport interface FieldCreationRequestBody {\r\n    type : FieldType,\r\n    elementType : FieldType,\r\n    key : string\r\n}",
            "properties": [
                {
                    "name": "elementType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldType",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Fleet",
            "id": "interface-Fleet-b47fb6371ff82766d0a05acc859553943637dcfa097cacddd599e95426e7e5e1f044920af2cfb681d87c97ceca66033fb4a4feee544e5e6f59aa57aee1c2e211",
            "file": "src/app/data/dto/fleet.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Car } from \"./car.dto\"\r\n\r\nexport interface Fleet {\r\n    id : number,\r\n    name : string,\r\n    description: string\r\n    cars : Car[]\r\n}",
            "properties": [
                {
                    "name": "cars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FleetCreationRequestBody",
            "id": "interface-FleetCreationRequestBody-5b96538f66163d0f3d251694349bb7d6e2f07cb6214f68290c4e05037441535b161ffc62602a1570719abe6a48f6c8984ce626ba399e782c13a5f217a43180a2",
            "file": "src/app/data/requestbody/fleet-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FleetCreationRequestBody {\r\n    name : string,\r\n    description: string\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ForbiddenValueAlert",
            "id": "interface-ForbiddenValueAlert-71aaf9f5a8247607dcc5aa0ffae12608fe79ada2e619c02f3ab543c187114d0bbec52cfa36ee06d53b7228f931b5cc1dfebc091bf7f0f82d098b6a9edfb31791",
            "file": "src/app/data/dto/alert.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertBase {\r\n    id: number,\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlert extends AlertBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlert extends AlertBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlert extends AlertBase{\r\n    forbiddenValue: number | boolean | string,\r\n}\r\n\r\nexport interface ExistsValueAlert extends AlertBase{\r\n    exists: boolean,\r\n}\r\nexport type Alert = MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert;",
            "properties": [
                {
                    "name": "forbiddenValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertBase"
            ]
        },
        {
            "name": "ForbiddenValueAlertCreationRequestBody",
            "id": "interface-ForbiddenValueAlertCreationRequestBody-393cd2defa8c9a1d72cd327a39a6b9fb2729c03f8c02876194da76b436ad8eb6a9f85885805275afcf332bab2ec0e31e63574bf7488709a3f4db705bff4262e6",
            "file": "src/app/data/requestbody/alert-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertCreationRequestBodyBase {\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    forbiddenValue: string,\r\n}\r\n\r\nexport interface ExistsValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    exists: boolean,\r\n}\r\n\r\nexport type AlertCreationRequestBody = MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody;",
            "properties": [
                {
                    "name": "forbiddenValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertCreationRequestBodyBase"
            ]
        },
        {
            "name": "Login",
            "id": "interface-Login-5b38cc44687385a26428590e1f9b8e9d84fb1ef0dd11160cef2fa899ecce6441444903215cedb4c0b6936f007757cf29494e0b6d1695de555aaddd5f5984d2a0",
            "file": "src/app/data/dto/login.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\r\n    token : string\r\n}",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MaxValueAlert",
            "id": "interface-MaxValueAlert-71aaf9f5a8247607dcc5aa0ffae12608fe79ada2e619c02f3ab543c187114d0bbec52cfa36ee06d53b7228f931b5cc1dfebc091bf7f0f82d098b6a9edfb31791",
            "file": "src/app/data/dto/alert.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertBase {\r\n    id: number,\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlert extends AlertBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlert extends AlertBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlert extends AlertBase{\r\n    forbiddenValue: number | boolean | string,\r\n}\r\n\r\nexport interface ExistsValueAlert extends AlertBase{\r\n    exists: boolean,\r\n}\r\nexport type Alert = MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert;",
            "properties": [
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertBase"
            ]
        },
        {
            "name": "MaxValueAlertCreationRequestBody",
            "id": "interface-MaxValueAlertCreationRequestBody-393cd2defa8c9a1d72cd327a39a6b9fb2729c03f8c02876194da76b436ad8eb6a9f85885805275afcf332bab2ec0e31e63574bf7488709a3f4db705bff4262e6",
            "file": "src/app/data/requestbody/alert-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertCreationRequestBodyBase {\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    forbiddenValue: string,\r\n}\r\n\r\nexport interface ExistsValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    exists: boolean,\r\n}\r\n\r\nexport type AlertCreationRequestBody = MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody;",
            "properties": [
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertCreationRequestBodyBase"
            ]
        },
        {
            "name": "Measurement",
            "id": "interface-Measurement-6055a9e8629f4c97167dbbdfebb3194f11535f876c5f59ea1d18efde29383072398fd009792b6591e546cb69fd18a2424a216612192adb1eb5b674f4aba75053",
            "file": "src/app/data/dto/measurement.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Alert } from \"./alert.dto\";\r\n\r\nexport interface Measurement {\r\n    timestamp : Date,\r\n    data : any,\r\n    alerts: Alert[]\r\n}",
            "properties": [
                {
                    "name": "alerts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MinValueAlert",
            "id": "interface-MinValueAlert-71aaf9f5a8247607dcc5aa0ffae12608fe79ada2e619c02f3ab543c187114d0bbec52cfa36ee06d53b7228f931b5cc1dfebc091bf7f0f82d098b6a9edfb31791",
            "file": "src/app/data/dto/alert.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertBase {\r\n    id: number,\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlert extends AlertBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlert extends AlertBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlert extends AlertBase{\r\n    forbiddenValue: number | boolean | string,\r\n}\r\n\r\nexport interface ExistsValueAlert extends AlertBase{\r\n    exists: boolean,\r\n}\r\nexport type Alert = MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert;",
            "properties": [
                {
                    "name": "minValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertBase"
            ]
        },
        {
            "name": "MinValueAlertCreationRequestBody",
            "id": "interface-MinValueAlertCreationRequestBody-393cd2defa8c9a1d72cd327a39a6b9fb2729c03f8c02876194da76b436ad8eb6a9f85885805275afcf332bab2ec0e31e63574bf7488709a3f4db705bff4262e6",
            "file": "src/app/data/requestbody/alert-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AlertCreationRequestBodyBase {\r\n    name: string,\r\n    keyName: string,\r\n}\r\n\r\nexport interface MinValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    minValue: number,\r\n}\r\n\r\nexport interface MaxValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    maxValue: number,\r\n}\r\n\r\nexport interface ForbiddenValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    forbiddenValue: string,\r\n}\r\n\r\nexport interface ExistsValueAlertCreationRequestBody extends AlertCreationRequestBodyBase{\r\n    exists: boolean,\r\n}\r\n\r\nexport type AlertCreationRequestBody = MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody;",
            "properties": [
                {
                    "name": "minValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AlertCreationRequestBodyBase"
            ]
        },
        {
            "name": "Schema",
            "id": "interface-Schema-af11c680e0d60b8d98b52f81873e0ea21ae8897ceb244f2e61b90eba8c2d875b96c528647cfb19bc8bbef43d0f409b649d7358fcb3a52194db1e7c91f593808d",
            "file": "src/app/data/dto/schema.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Car } from \"./car.dto\";\r\nimport { Field } from \"./field.dto\";\r\n\r\nexport interface Schema {\r\n    id : number,\r\n    name : string,\r\n    fields : Field[]\r\n\r\n    carIds : number[]\r\n}",
            "properties": [
                {
                    "name": "carIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SchemaCarAssigmentOutput",
            "id": "interface-SchemaCarAssigmentOutput-630a6bfbe53f5549783574acf9944d68152e265919154b119a6e6538ca9855fa1270c061e59219b2537b228d3c4b40e75de5e73f73f7eb89b5f9a67473427ae0",
            "file": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\n\r\nclass CheckboxModel {\r\n  car!: Car;\r\n  checked : boolean = false;\r\n}\r\n\r\nexport interface SchemaCarAssigmentOutput{\r\n    add : Car[]\r\n    remove: Car[]\r\n    schema: Schema\r\n}\r\n\r\n@Component({\r\n  selector: 'app-schema-car-assigment',\r\n  templateUrl: './schema-car-assigment.component.html',\r\n  styleUrls: ['./schema-car-assigment.component.scss']\r\n})\r\nexport class SchemaCarAssigmentComponent implements OnInit {\r\n  model : CheckboxModel[] = []\r\n\r\n  schema : Schema | undefined;\r\n\r\n  constructor(\r\n    private fleetManagementService : FleetManagementService,\r\n    private bottomSheetRef : MatBottomSheetRef<SchemaCarAssigmentComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) data: {schema: Schema}\r\n  ) {\r\n    this.schema = data.schema\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getModel()\r\n  }\r\n  \r\n  getModel(){\r\n    this.fleetManagementService.getAllCars().subscribe(\r\n      cars => {\r\n        this.model = cars.map(car => {\r\n          return {\r\n            car: car,\r\n            checked: this.schema!.carIds.some(carId => carId == car.id)\r\n          }\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  onAssign(){\r\n    this.bottomSheetRef.dismiss({\r\n      add: this.model.filter(entry=> entry.checked).map(entry => entry.car),\r\n      remove: this.model.filter(entry=> entry.checked == false).map(entry => entry.car),\r\n      schema: this.schema\r\n    })\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "add",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "remove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Schema",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SchemaCreationRequestBody",
            "id": "interface-SchemaCreationRequestBody-f484da8a2fbc4ae348d13592e4eacb2ffca040723921442582bffa366dd97e709c71d601b98b02c6896145016c37d14b6698b57700e3cb483c3b6dfd9346beb4",
            "file": "src/app/data/requestbody/schema-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FieldCreationRequestBody } from \"./field-creation.dto\";\r\n\r\nexport interface SchemaCreationRequestBody {\r\n    name : string\r\n}",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-f48c4c6dca3e85d247eb3aaaaaf52d18be58377431cf0dca1338c52bc6d948f024b030f0f58d430c4095b1de96673aeef5e0dc34a87dc6b22ce66ea1d75bd8bb",
            "file": "src/app/data/dto/user.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id : number, \r\n    email : string,\r\n    isAdmin : boolean\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserCreationRequestBody",
            "id": "interface-UserCreationRequestBody-bd828a89cc4abaf744c1fba7d0f537e5776844e97a69d1183f9bae0b48ec6382ce7c279acf49dac3c63e743327ac5b21b4e929f4d1e5b8d6a22b34128f00bc09",
            "file": "src/app/data/requestbody/user-creation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserCreationRequestBody {\r\n    email : string,\r\n    password : string,\r\n    isAdmin : boolean\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AlertsManagementService",
            "id": "injectable-AlertsManagementService-9f2ce0541e1e87613ff8bd8443b016551819043cb04e96672a84f9a4ee55d0afecfde3e40aaaf4476664ffbdd0f508010050bab6c96ba4a8ecdb772aca2394a2",
            "file": "src/app/shared/services/alerts-management.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAlert",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "alert",
                            "type": "AlertCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alert",
                            "type": "AlertCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAlert",
                    "args": [
                        {
                            "name": "alertId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alertId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAlerts",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, map } from 'rxjs';\r\nimport { Alert } from 'src/app/data/dto/alert.dto';\r\nimport { AlertCreationRequestBody } from 'src/app/data/requestbody/alert-creation.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertsManagementService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  getAlerts(carId : number){\r\n    return this.http.get<Alert[]>(\"/api/alert\", {params: {carId: carId}})\r\n  }\r\n\r\n  createAlert(carId : number, alert : AlertCreationRequestBody){\r\n    return this.http.put(\"/api/alert\", alert, { params: {carId: carId} ,observe: 'response' }).pipe(map(response => response.ok))\r\n\r\n  }\r\n\r\n  deleteAlert(alertId : number){\r\n    return this.http.delete(\"/api/alert/\" + alertId, { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CarReportingService",
            "id": "injectable-CarReportingService-10144bbe1dfe7ed451fd1fb846e041b80937b41d0fd783feeb24052e0b471a9bbc30460f5fcfa1a07fd0ad98eadb90cf4fcc4e4c232fcda4654821f8fe11e243",
            "file": "src/app/shared/services/car-reporting.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMeasurements",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Measurement[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSchemasForCar",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, map } from 'rxjs';\r\nimport { Alert } from 'src/app/data/dto/alert.dto';\r\nimport { FieldType } from 'src/app/data/dto/field.dto';\r\nimport { Measurement } from 'src/app/data/dto/measurement.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarReportingService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getSchemasForCar(carId: number) {\r\n    return this.http.get<Schema[]>(\"/api/schema/getSchemasForCar\", { params: { carId: carId } })\r\n  }\r\n\r\n  getMeasurements(carId: number, schemaId: number): Observable<Measurement[]> {\r\n    return this.http.get<{ timestamp: string, data: string, alerts : Alert[] }[]>(\"/api/measurement\", { params: { carId: carId, schemaId: schemaId } })\r\n      .pipe(map(result => {\r\n        return result.map(m => {\r\n          return {\r\n            timestamp: new Date(m.timestamp),\r\n            data: JSON.parse(m.data),\r\n            alerts: m.alerts\r\n          }\r\n        })\r\n      }))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FirebaseService",
            "id": "injectable-FirebaseService-ee0bd5a4c16761dcc187490622636f3923e8d439ce750e80cc46ab3b385792b73051f67a7691580655229f33abc957cd72dde293e1828c8992ffaef1f9faa527",
            "file": "src/app/shared/services/firebase.service.ts",
            "properties": [
                {
                    "name": "app",
                    "defaultValue": "initializeApp(this.firebaseConfig)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "callback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firebaseConfig",
                    "defaultValue": "{\n    apiKey: \"AIzaSyDM9uDH71OjUhydk7sK-utarrQmGe_sYiE\",\n    authDomain: \"fleetbrotheraut.firebaseapp.com\",\n    projectId: \"fleetbrotheraut\",\n    storageBucket: \"fleetbrotheraut.appspot.com\",\n    messagingSenderId: \"446181553044\",\n    appId: \"1:446181553044:web:8d01986620c7dadac85581\"\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messaging",
                    "defaultValue": "getMessaging()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "token",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "vapidKey",
                    "defaultValue": "\"BIfadVXaaoWDuBjhdHRmAcMKQzUpzA2AQna_-eq13bnfOWeycB1P5LU5P-pVGRFcvR1eoYI2w1dJwc_zpPJYF-A\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFcmToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeFirebase",
                    "args": [
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "message",
                                    "type": "MessagePayload",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "message",
                                    "type": "MessagePayload",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerPopupService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "requestPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { initializeApp } from 'firebase/app';\nimport { MessagePayload, getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  constructor(private snackBar : MatSnackBar) { }\n\n  private firebaseConfig = {\n    apiKey: \"AIzaSyDM9uDH71OjUhydk7sK-utarrQmGe_sYiE\",\n    authDomain: \"fleetbrotheraut.firebaseapp.com\",\n    projectId: \"fleetbrotheraut\",\n    storageBucket: \"fleetbrotheraut.appspot.com\",\n    messagingSenderId: \"446181553044\",\n    appId: \"1:446181553044:web:8d01986620c7dadac85581\"\n  }; \n\n  private vapidKey : string = \"BIfadVXaaoWDuBjhdHRmAcMKQzUpzA2AQna_-eq13bnfOWeycB1P5LU5P-pVGRFcvR1eoYI2w1dJwc_zpPJYF-A\"\n\n  token : string = \"\"\n\n  private app = initializeApp(this.firebaseConfig); \n\n  private messaging = getMessaging();\n\n  private callback : (message: MessagePayload) => void = () => {}\n\n  initializeFirebase(callback: (message: MessagePayload) => void){\n    this.callback = callback;\n    this.requestPermission();\n  }\n\n  private getFcmToken() {\n    getToken(this.messaging, { vapidKey: this.vapidKey }).then((currentToken) => {\n      if (currentToken) {\n        this.token = currentToken;\n        console.log(this.token)\n        this.registerPopupService()\n        // Send the token to your server and update the UI if necessary\n      } else {\n        // Show permission request UI\n        console.log('No registration token available. Request permission to generate one.');\n      }\n    }).catch((err) => {\n      console.log('An error occurred while retrieving token. ', err);\n    });\n  }\n\n  requestPermission() {\n    console.log('Requesting permission...');\n    Notification.requestPermission().then((permission) => {\n      if (permission === 'granted') {\n        console.log('Notification permission granted.');\n        this.getFcmToken()\n      }\n    })\n  }\n\n  private registerPopupService(){\n    onMessage(this.messaging, (payload) => {\n      console.log('Message received. ', payload);\n      this.callback(payload)\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FleetManagementService",
            "id": "injectable-FleetManagementService-73c78e9e2ff2251e8673f87240bdf8c642ee523d41cc7733c2035a60917f6aaef558e7a047962c34bac4bccec41bdfaf048b7c3e64901ba404681e8d123ef7d1",
            "file": "src/app/shared/services/fleet-management.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "acceptCarJoinRequest",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFleet",
                    "args": [
                        {
                            "name": "requestbody",
                            "type": "FleetCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestbody",
                            "type": "FleetCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "declineCarJoinRequest",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFleet",
                    "args": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCars",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllFleets",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Fleet[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCarById",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Car | undefined>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCarsForFleet",
                    "args": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Car[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFleetById",
                    "args": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Fleet | undefined>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewcomerCars",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Car[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCarFromFleet",
                    "args": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "carId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fleetId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, map } from 'rxjs';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\nimport { FleetCreationRequestBody } from 'src/app/data/requestbody/fleet-creation.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FleetManagementService {\r\n\r\n  constructor(private http : HttpClient) { }\r\n  \r\n\r\n  getAllFleets() : Observable<Fleet[]>{\r\n    return this.http.get<Fleet[]>(\"/api/fleet\")\r\n  }\r\n\r\n  getFleetById(fleetId : number) : Observable<Fleet | undefined>{\r\n    return this.http.get<Fleet>(\"/api/fleet/\" + fleetId)\r\n  }\r\n\r\n  getAllCars(){\r\n    return this.http.get<Car[]>(\"/api/car\")\r\n  }\r\n\r\n  getCarsForFleet(fleetId : number) : Observable<Car[]>{\r\n    return this.http.get<Car[]>(\"/api/car/getCarsForFleet\", {\r\n      params: {\r\n        fleetId: fleetId\r\n      }\r\n    })\r\n  }\r\n\r\n  getNewcomerCars() : Observable<Car[]>{\r\n    return this.http.get<Car[]>(\"/api/car/newcomers\")\r\n  }\r\n\r\n  getCarById(carId : number) : Observable<Car | undefined>{\r\n    return this.http.get<Car>(\"/api/car/\" + carId)\r\n  }\r\n\r\n  createFleet(requestbody: FleetCreationRequestBody) : Observable<boolean> {\r\n    return this.http.put(\"/api/fleet/create\", requestbody, { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  deleteFleet(fleetId : number) : Observable<boolean> {\r\n    return this.http.delete(\"/api/fleet/\" + fleetId, { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  removeCarFromFleet(carId : number, fleetId : number) : Observable<boolean> {\r\n    return this.http.delete(\"/api/car/\"+carId+\"/removeFromFleet\", { observe: 'response', params: {fleetId: fleetId} }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  declineCarJoinRequest(carId : number) : Observable<boolean> {\r\n    return this.http.delete(\"/api/car/\" + carId + \"/declineRequest\", { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  acceptCarJoinRequest(carId : number, fleetId : number) : Observable<boolean> {\r\n    return this.http.put(\"/api/car/\" + carId + \"/acceptRequest\", null, { observe: 'response', params: {fleetId: fleetId} }).pipe(map(response => response.ok))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-b4b96f35ff556e6aba219547e1b8962a31a233b8fcafb334ded2f1ffbed797cf54cc97921d740280da5b25bf2f46e8d29a126b0bf4fb908fd66de9a1dd7d6c9a",
            "file": "src/app/shared/services/loading.service.ts",
            "properties": [
                {
                    "name": "isLoading",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  constructor() { }\n\n  isLoading : BehaviorSubject<boolean> = new BehaviorSubject(false);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-d65eb8525c2f0ac16b2d5b2cf39441ba6ae5cacc5e674e5cff2ae5ac37ed20a6ba33e14ad44ed431418e5b98d7a571bb34b84cb62d290eff24e266898b3d44b6",
            "file": "src/app/shared/services/login.service.ts",
            "properties": [
                {
                    "name": "_token",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "LOGIN_TOKEN_KEY",
                    "defaultValue": "\"TOKEN\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSuccess",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithCredentials",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveLastToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendLoginCredentialsRequest",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Login>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendLoginTokenRequest",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, tap } from 'rxjs';\nimport { Login } from 'src/app/data/dto/login.dto';\nimport { User } from 'src/app/data/dto/user.dto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  private static LOGIN_TOKEN_KEY = \"TOKEN\"\n\n  constructor(private http : HttpClient) { }\n  private _token: string = \"\"\n  private _user: User | undefined;\n\n  get token() {\n    return this._token\n  }\n\n  get user(): User | undefined {\n    if(this.isSuccess(this._token)){\n      var jwtDecoded = JSON.parse(window.atob(this.token.split('.')[1]));\n      return {\n        id: 0,\n        email: jwtDecoded.email,\n        isAdmin: jwtDecoded.role == \"ADMIN\"\n      }\n    }\n    return undefined;\n  }\n\n  login() {\n    var token = this.retrieveLastToken()\n    if (token != null) {\n      this._token = token!\n      return this.sendLoginTokenRequest(token).pipe(tap(\n        success => {\n          if (success) {\n            this._token = token!\n          } else {\n            this._token = \"\"\n            this.clearToken()\n          }\n        })\n      )\n    }\n    return new BehaviorSubject(false)\n  }\n\n  loginWithCredentials(username: string, password: string) {\n    return this.sendLoginCredentialsRequest(username, password).pipe(tap(\n      login => {\n        if (this.isSuccess(login.token)) {\n          this._token = login.token\n          this.saveToken(login.token)\n        }\n      }\n    )).pipe(map(login => this.isSuccess(login.token)))\n  }\n\n  private retrieveLastToken() {\n    var lastToken = localStorage.getItem(LoginService.LOGIN_TOKEN_KEY)\n    return lastToken;\n  }\n\n  private saveToken(token: string) {\n    var lastToken = localStorage.setItem(LoginService.LOGIN_TOKEN_KEY, token)\n    return lastToken;\n  }\n\n  private sendLoginTokenRequest(token: string): Observable<boolean> {\n    return this.http.post(\"/api/auth/checkToken\", null,{ observe: 'response' }).pipe(map(response => response.ok))\n  }\n\n  private sendLoginCredentialsRequest(email: string, password: string): Observable<Login> {\n    return this.http.post<Login>(\"/api/auth/login\", {email: email, password: password})\n  }\n\n  private clearToken() {\n    localStorage.removeItem(LoginService.LOGIN_TOKEN_KEY)\n  }\n\n  private isSuccess(token: string){\n    return token != null && token != \"\"\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                },
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "User | undefined",
                        "line": 21
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MessageDialogService",
            "id": "injectable-MessageDialogService-32603854ceff235cddfab2597da3894691012f0f9fddf4c3d5186381693b3743a786a595be7dc256c8ad1dc5c6af5ad3ef2e84337b57c66cc67e9c7812458319",
            "file": "src/app/shared/services/message-dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openChooseDialog",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Choose\""
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Choose\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openErrorDialog",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Error\""
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Error\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSuccessDialog",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Success\""
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Success\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"Message\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MessageDialogComponent } from '../components/message-dialog/message-dialog.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageDialogService {\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  openSuccessDialog(title: string = \"Success\", body: string =\"Message\"){\r\n    return this.dialog.open(MessageDialogComponent, {\r\n      data: {\r\n        title: title,\r\n        body: body,\r\n        error: false,\r\n        decision: false\r\n      }\r\n    })\r\n  }\r\n\r\n  openErrorDialog(title: string = \"Error\", body: string =\"Message\"){\r\n    return this.dialog.open(MessageDialogComponent, {\r\n      data: {\r\n        title: title,\r\n        body: body,\r\n        error: false,\r\n        decision: false,\r\n      }\r\n    })\r\n  }\r\n\r\n  openChooseDialog(title: string = \"Choose\", body: string =\"Message\"){\r\n    return this.dialog.open(MessageDialogComponent, {\r\n      data: {\r\n        title: title,\r\n        body: body,\r\n        error: true,\r\n        decision: true\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SchemaManagementService",
            "id": "injectable-SchemaManagementService-f8b2054e6ff952d61d961fd8e54eae10918786b362d6e0b7929b60a030b7dc660fa9589cad88de4370c37b436630dadf05232aa656245ffe87038dc297eafa32",
            "file": "src/app/shared/services/schema-management.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addFieldToSchema",
                    "args": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "assignSchemaToCar",
                    "args": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "carIdsToAdd",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "carIdsToRemove",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "carIdsToAdd",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "carIdsToRemove",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSchema",
                    "args": [
                        {
                            "name": "schema",
                            "type": "SchemaCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "SchemaCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSchema",
                    "args": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllSchemas",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Schema[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFieldFromSchema",
                    "args": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schemaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, map } from 'rxjs';\r\nimport { Field, FieldType } from 'src/app/data/dto/field.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { FieldCreationRequestBody } from 'src/app/data/requestbody/field-creation.dto';\r\nimport { SchemaCreationRequestBody } from 'src/app/data/requestbody/schema-creation.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SchemaManagementService {\r\n  constructor(private http : HttpClient) { }\r\n\r\n  getAllSchemas() : Observable<Schema[]> {\r\n    return this.http.get<Schema[]>(\"/api/schema\")\r\n  }\r\n\r\n  createSchema(schema: SchemaCreationRequestBody) {\r\n    return this.http.put(\"/api/schema/create\", schema, { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  addFieldToSchema(schemaId : number, field: FieldCreationRequestBody) {\r\n    return this.http.put(\"/api/schema/\"+ schemaId + \"/addField\", field, { observe: 'response' }).pipe(map(response => response.ok))\r\n\r\n  }\r\n\r\n  removeFieldFromSchema(schemaId : number, fieldId: number) {\r\n    return this.http.delete(\"/api/schema/\"+ schemaId + \"/removeField\", { observe: 'response', params: {fieldId: fieldId} }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  deleteSchema(schemaId : number) {\r\n    return this.http.delete(\"/api/schema/\"+ schemaId, { observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n\r\n  assignSchemaToCar(schemaId : number, carIdsToAdd : number[], carIdsToRemove : number[]){\r\n    return this.http.put(\"/api/schema/\" + schemaId+ \"/assignSchemaToCar\", {carIdsToAdd: carIdsToAdd, carIdsToRemove: carIdsToRemove} ,{ observe: 'response' }).pipe(map(response => response.ok))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserManagementService",
            "id": "injectable-UserManagementService-2d69de06d3d84c3a21415b02192f6a2d3b5283a3a8a9434fa5fe68da35ab6b5b8ea5678c2f8a51f4314d1e88a27959a09ba0ec6b8886b33e611210553a9ef94c",
            "file": "src/app/shared/services/user-management.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { User } from 'src/app/data/dto/user.dto';\nimport { UserCreationRequestBody } from 'src/app/data/requestbody/user-creation.dto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserManagementService {\n\n  constructor(private http : HttpClient) { }\n\n  getUsers() {\n    return this.http.get<User[]>(\"/api/user\")\n  }\n\n  createUser(user : UserCreationRequestBody) {\n    return this.http.put(\"/api/user\", user, { observe: 'response' }).pipe(map(response => response.ok))\n  }\n\n  deleteUser(userId : number) {\n    return this.http.delete(\"/api/user/\" + userId, { observe: 'response' }).pipe(map(response => response.ok))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-ceacaa06462ef817fabe30d14a8f6bfc3a6100333b205995cb67abf7d8cd344c49b0e8e717a29c095523a39ff3ad39f502fb350e21fefbf388201d9702a19615",
            "file": "src/app/shared/guards/admin.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable }     from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { LoginService } from '../services/login.service';\r\nimport { map, switchMap, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n    canActivate() {\r\n        return this.loginService.login().pipe(tap(login => {\r\n            if (!login|| this.loginService.user == undefined || !this.loginService.user.isAdmin) {\r\n                this.router.navigate(['login']);\r\n            }\r\n        })).pipe(map(user=> user != null))\r\n    }\r\n    //Constructor \r\n    constructor(private router: Router, private loginService : LoginService) { }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-2c4a8f59adcc838ea76e6dcc832ff650d6ee72157b0331134b692a8664ea42b2cfdde7e26365ca5cc373e537e07d106fc5a714938c79b032228045809af9b656",
            "file": "src/app/shared/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable }     from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { LoginService } from '../services/login.service';\r\nimport { tap } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n    canActivate() {\r\n        return this.loginService.login().pipe(tap(login => {\r\n            if (!login) {\r\n                this.router.navigate(['login']);\r\n            }\r\n        }))\r\n    }\r\n    //Constructor \r\n    constructor(private router: Router, private loginService : LoginService) { }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-6b1d4d702f970473b51f5ceb5f7f98e84aad7fbbff0ca775ebf0d42fae271f2498a7321f42d01e1d2ae460bc28ffa226ac25320f8bdd6811604cf16a7b278637",
            "file": "src/app/shared/interceptor/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { LoginService } from '../services/login.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private login: LoginService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    // Get the auth token from the service.\r\n    const authToken = this.login.token;\r\n\r\n    // Clone the request and replace the original headers with\r\n    // cloned headers, updated with the authorization.\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization',\"Bearer \" + authToken)\r\n    });\r\n\r\n    // send cloned request with header to the next handler.\r\n    return next.handle(authReq);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "login",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "login",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        },
        {
            "name": "LoadingInterceptor",
            "id": "injectable-LoadingInterceptor-f1beb4c2e5b9e70455d3ec5d2a17c23da59fb2b4ebb1afd0a3b2bd7136c46e31544dc0d1c7290bb17b4c64b1bc7b46ec31f13a32a9590b4813d4a39ddfd2e41e",
            "file": "src/app/shared/interceptor/loading-interceptor.ts",
            "properties": [
                {
                    "name": "totalRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { LoadingService } from '../services/loading.service';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n  private totalRequests = 0;\r\n\r\n  constructor(private loadingService: LoadingService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\r\n    this.totalRequests++;\r\n    this.loadingService.isLoading.next(true);\r\n\r\n    return next.handle(request).pipe(\r\n      finalize(() => {\r\n        this.totalRequests--;\r\n        if (this.totalRequests === 0) {\r\n            this.loadingService.isLoading.next(false);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "CheckboxModel",
            "id": "class-CheckboxModel-630a6bfbe53f5549783574acf9944d68152e265919154b119a6e6538ca9855fa1270c061e59219b2537b228d3c4b40e75de5e73f73f7eb89b5f9a67473427ae0",
            "file": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Inject, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\n\r\nclass CheckboxModel {\r\n  car!: Car;\r\n  checked : boolean = false;\r\n}\r\n\r\nexport interface SchemaCarAssigmentOutput{\r\n    add : Car[]\r\n    remove: Car[]\r\n    schema: Schema\r\n}\r\n\r\n@Component({\r\n  selector: 'app-schema-car-assigment',\r\n  templateUrl: './schema-car-assigment.component.html',\r\n  styleUrls: ['./schema-car-assigment.component.scss']\r\n})\r\nexport class SchemaCarAssigmentComponent implements OnInit {\r\n  model : CheckboxModel[] = []\r\n\r\n  schema : Schema | undefined;\r\n\r\n  constructor(\r\n    private fleetManagementService : FleetManagementService,\r\n    private bottomSheetRef : MatBottomSheetRef<SchemaCarAssigmentComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) data: {schema: Schema}\r\n  ) {\r\n    this.schema = data.schema\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getModel()\r\n  }\r\n  \r\n  getModel(){\r\n    this.fleetManagementService.getAllCars().subscribe(\r\n      cars => {\r\n        this.model = cars.map(car => {\r\n          return {\r\n            car: car,\r\n            checked: this.schema!.carIds.some(carId => carId == car.id)\r\n          }\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  onAssign(){\r\n    this.bottomSheetRef.dismiss({\r\n      add: this.model.filter(entry=> entry.checked).map(entry => entry.car),\r\n      remove: this.model.filter(entry=> entry.checked == false).map(entry => entry.car),\r\n      schema: this.schema\r\n    })\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertCreationComponent",
            "id": "component-AlertCreationComponent-7269c76fd966d24fecc41b5fa321ada8deb7ec378e49233bea1163c9b437bff3a8b3f7556de056c99c18a127b5e80fb5321c4be2702aa054263c60bd1f0c4158",
            "file": "src/app/car-reporting/components/alert-creation/alert-creation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-creation",
            "styleUrls": [
                "./alert-creation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-creation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Field[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<AlertCreationRequestBody>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "alertType",
                    "defaultValue": "AlertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldType",
                    "defaultValue": "FieldType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "inputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "inputName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "inputType",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inputValue",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createReturnValue",
                    "args": [],
                    "optional": false,
                    "returnType": "AlertCreationRequestBody",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateField",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "FieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "FieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateFields",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Field, FieldType } from 'src/app/data/dto/field.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { AlertCreationRequestBody } from 'src/app/data/requestbody/alert-creation.dto';\r\n\r\nenum AlertType {\r\n  MIN = \"min\",\r\n  MAX =\"max\",\r\n  FORBIDDEN = \"forbidden\",\r\n  EXISTS = \"exists\"\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert-creation',\r\n  templateUrl: './alert-creation.component.html',\r\n  styleUrls: ['./alert-creation.component.scss']\r\n})\r\nexport class AlertCreationComponent {\r\n  @Input() fields : Field[] = [];\r\n  inputName : string = \"\"\r\n  inputField : Field | undefined\r\n  inputType : AlertType | undefined = undefined\r\n  inputValue : string = \"\"\r\n\r\n  fieldType = FieldType\r\n  alertType = AlertType\r\n\r\n  @Output() onCreate : EventEmitter<AlertCreationRequestBody> = new EventEmitter()\r\n\r\n  onSubmit() {\r\n    if(this.validateFields()){\r\n      this.onCreate.emit(this.createReturnValue())\r\n      this.inputName = \"\"\r\n      this.inputField = undefined\r\n      this.inputType = undefined\r\n      this.inputValue = \"\"\r\n    }\r\n  }\r\n\r\n  createReturnValue(): AlertCreationRequestBody{\r\n    switch(this.inputType){\r\n      case AlertType.MIN:\r\n        return {\r\n          name: this.inputName,\r\n          keyName: this.inputField!.key,\r\n          minValue: Number(this.inputValue)\r\n        }\r\n      case AlertType.MAX:\r\n        return {\r\n          name: this.inputName,\r\n          keyName: this.inputField!.key,\r\n          maxValue: Number(this.inputValue)\r\n        }\r\n      case AlertType.FORBIDDEN:\r\n        return {\r\n          name: this.inputName,\r\n          keyName: this.inputField!.key,\r\n          forbiddenValue: this.inputValue\r\n        }\r\n      case AlertType.EXISTS:\r\n        return {\r\n          name: this.inputName,\r\n          keyName: this.inputField!.key,\r\n          exists: true\r\n        }\r\n      default:\r\n        return null!\r\n    }\r\n  }\r\n\r\n  validateFields(){\r\n    if(this.inputName == \"\" || this.inputField == null || this.inputType == null){\r\n      return false\r\n    }\r\n    if(this.inputType == AlertType.EXISTS){\r\n      return true\r\n    }\r\n    if(this.inputField.type == FieldType.LIST){\r\n      return this.validateField(this.inputValue, this.inputField.elementType!)\r\n    } else {\r\n      return this.validateField(this.inputValue, this.inputField.type)\r\n    }\r\n  }\r\n\r\n  validateField(value: string, type: FieldType){\r\n    switch(type){\r\n      case FieldType.NUMBER:\r\n        return Number(value) != Number.NaN\r\n      case FieldType.BOOLEAN:\r\n        return value == \"true\" || value == \"false\"\r\n      case FieldType.STRING:\r\n        return typeof value == \"string\"\r\n      case FieldType.LIST:\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert-creation {\r\n    display: flex; \r\n    align-items: top;\r\n    & > * {\r\n        margin-right: 4px;\r\n    }\r\n\r\n    button{\r\n        margin-top: 4px;\r\n    }\r\n}",
                    "styleUrl": "./alert-creation.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"alert-creation\">\r\n    <mat-form-field>\r\n        <mat-label>Name</mat-label>\r\n        <input matInput [(ngModel)]=\"inputName\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <mat-label>Key</mat-label>\r\n        <mat-select [(ngModel)]=\"inputField\">\r\n            <mat-option *ngFor=\"let field of fields\" [value]=\"field\">{{field.key}} : {{field.type}}{{field.type == fieldType.LIST ? \"\\<\"+ field.elementType + \"\\>\" : \"\"}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <mat-label>Type</mat-label>\r\n        <mat-select [(ngModel)]=\"inputType\">\r\n            <mat-option *ngIf=\"inputField?.type == fieldType.NUMBER\" value=\"min\">Min</mat-option>\r\n            <mat-option *ngIf=\"inputField?.type == fieldType.NUMBER\" value=\"max\">Max</mat-option>\r\n            <mat-option value=\"forbidden\">Forbidden</mat-option>\r\n            <mat-option value=\"exists\">Exists</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field *ngIf=\"inputType != alertType.EXISTS\">\r\n        <mat-label>Value</mat-label>\r\n        <input matInput [(ngModel)]=\"inputValue\">\r\n    </mat-form-field>\r\n    <button mat-icon-button (click)=\"onSubmit()\">\r\n        <mat-icon>add</mat-icon>\r\n    </button>\r\n</div>\r\n"
        },
        {
            "name": "AlertOverviewComponent",
            "id": "component-AlertOverviewComponent-647c52d94760f28e6c92e38fe283e0c22f36e9121f27634832f860e88f69c95dead6d38be14b0a3b7d3a629aed2bac21d8ff4f54bd0aab7cc07b9608b233edf3",
            "file": "src/app/car-reporting/components/alert-overview/alert-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-overview",
            "styleUrls": [
                "./alert-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Alert | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<Alert>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isExistsValueAlert",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExistsValueAlert",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isForbiddenValueAlert",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ForbiddenValueAlert",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMaxValueAlert",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MaxValueAlert",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinValueAlert",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MinValueAlert",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeletePressed",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Alert, ExistsValueAlert, ForbiddenValueAlert, MaxValueAlert, MinValueAlert } from 'src/app/data/dto/alert.dto';\r\n\r\n@Component({\r\n  selector: 'app-alert-overview',\r\n  templateUrl: './alert-overview.component.html',\r\n  styleUrls: ['./alert-overview.component.scss']\r\n})\r\nexport class AlertOverviewComponent {\r\n  @Input() alert : Alert | undefined\r\n\r\n  @Output() onDelete : EventEmitter<Alert> = new EventEmitter()\r\n\r\n  isMinValueAlert(alert : Alert): alert is MinValueAlert {\r\n    return (alert as MinValueAlert).minValue != null\r\n  }\r\n\r\n  isMaxValueAlert(alert : Alert): alert is MaxValueAlert {\r\n    return (alert as MaxValueAlert).maxValue != null\r\n  }\r\n\r\n  isForbiddenValueAlert(alert : Alert): alert is ForbiddenValueAlert {\r\n    return (alert as ForbiddenValueAlert).forbiddenValue != null\r\n  }\r\n\r\n  isExistsValueAlert(alert : Alert): alert is ExistsValueAlert {\r\n    return (alert as ExistsValueAlert).exists != null\r\n  }\r\n\r\n  onDeletePressed(alert :Alert){\r\n    this.onDelete.emit(alert);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert-overview-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    .alert-overview-info{\r\n        mat-card-content {\r\n            display: flex;\r\n            align-items: center;\r\n            & > * {\r\n                margin-bottom: 0px;\r\n                margin-right: 16px;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./alert-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card *ngIf=\"alert != null\">\r\n    <div class=\"alert-overview-container\">\r\n        <div class=\"alert-overview-info\">\r\n            <mat-card-content style=\"display: flex;\">\r\n                <mat-card-title>{{alert.name}}</mat-card-title>\r\n                <mat-card-subtitle>ID: {{alert.id}}</mat-card-subtitle>\r\n                <h4>Key: {{alert.keyName}}</h4>\r\n                <h4 *ngIf=\"isMinValueAlert(alert)\">Min: {{alert.minValue}}</h4>\r\n                <h4 *ngIf=\"isMaxValueAlert(alert)\">Max: {{alert.maxValue}}</h4>\r\n                <h4 *ngIf=\"isForbiddenValueAlert(alert)\">Forbidden: {{alert.forbiddenValue}}</h4>\r\n                <h4 *ngIf=\"isExistsValueAlert(alert)\">should not exist</h4>\r\n            </mat-card-content>\r\n        </div>\r\n    \r\n        <div class=\"alert-overview-tools\">\r\n            <button mat-icon-button (click)=\"onDeletePressed(alert)\">\r\n                <mat-icon>delete</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</mat-card>"
        },
        {
            "name": "AlertsManagerComponent",
            "id": "component-AlertsManagerComponent-4ec8693369af480b3a78bebf628cb170616062a928c50207e2a58fc423a998bd181632d9b6255dfa1536af03bc42a31cf717637bfb4b4dfecf6406c50a00dd34",
            "file": "src/app/car-reporting/components/alerts-manager/alerts-manager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alerts-manager",
            "styleUrls": [
                "./alerts-manager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alerts-manager.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "alert",
                            "type": "AlertCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "AlertCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Alert } from 'src/app/data/dto/alert.dto';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Field } from 'src/app/data/dto/field.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { AlertCreationRequestBody } from 'src/app/data/requestbody/alert-creation.dto';\r\nimport { AlertsManagementService } from 'src/app/shared/services/alerts-management.service';\r\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-alerts-manager',\r\n  templateUrl: './alerts-manager.component.html',\r\n  styleUrls: ['./alerts-manager.component.scss']\r\n})\r\nexport class AlertsManagerComponent implements OnInit {\r\n  constructor(\r\n    private alertService : AlertsManagementService,\r\n    private dialogService : MessageDialogService,\r\n    @Inject(MAT_DIALOG_DATA) public data: {car: Car, fields : Field[]}\r\n  ){\r\n    this.car = data.car\r\n    this.fields = data.fields\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchData()\r\n  }\r\n\r\n  car :Car\r\n  fields : Field[] = []\r\n\r\n  alerts : Alert[] = []\r\n\r\n  fetchData(){\r\n    this.alertService.getAlerts(this.car.id).subscribe(alerts => {\r\n      this.alerts = alerts\r\n    })\r\n  }\r\n\r\n  onCreate(alert : AlertCreationRequestBody){\r\n    this.alertService.createAlert(this.car.id, alert).subscribe(result => {\r\n      if(result){\r\n        this.dialogService.openSuccessDialog(\"Operation successful.\", \"Alert has been created.\")\r\n      } else {\r\n        this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n      }\r\n      this.fetchData();\r\n    })\r\n  }\r\n\r\n  onDelete(alert: Alert) {\r\n    const ref = this.dialogService.openChooseDialog(\"Delete alert for car\", `Are you sure you want to delete alert: #${alert.id}: ${alert.name} for #${this.car.id}: ${this.car.name}, License plate: ${this.car.licensePlate}, VIN: ${this.car.vin}?`)\r\n    ref.afterClosed().subscribe((decision) => {\r\n      if(decision){\r\n        this.alertService.deleteAlert(alert.id).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Alert has been deleted.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n    \r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alerts {\r\n    margin-bottom: 16px;\r\n}",
                    "styleUrl": "./alerts-manager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertService",
                        "type": "AlertsManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "alertService",
                        "type": "AlertsManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Alerts</h1>\r\n<div mat-dialog-content>\r\n    <div class=\"alerts\" *ngFor=\"let alert of alerts\">\r\n        <app-alert-overview [alert]=\"alert\" (onDelete)=\"onDelete($event)\"></app-alert-overview>\r\n    </div>\r\n    <app-alert-creation [fields]=\"fields\" (onCreate)=\"onCreate($event)\"></app-alert-creation>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-71768ab7aa3a95f9c86ccb7333982f2e45c4a4ba0997137a9d0d3e8ff74a1bf3bc4259d9b0d25a01481c0df8b6bac6581a56bc43b7eae7e8a36c02b0371c2896",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "firabaseService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FirebaseService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "loginService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sideBarOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "defaultValue": "'Fleet Brother'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n// Import the functions you need from the SDKs you need\r\nimport { LoadingService } from './shared/services/loading.service';\r\nimport { FirebaseService } from './shared/services/firebase.service';\r\nimport { MessagePayload } from 'firebase/messaging';\r\nimport { LoginService } from './shared/services/login.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  constructor(\r\n    public loginService : LoginService,\r\n    public firabaseService : FirebaseService,\r\n    private loadingService : LoadingService,\r\n    private ref: ChangeDetectorRef\r\n    ){\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.firabaseService.initializeFirebase((message : MessagePayload) =>{\r\n\r\n    });\r\n    this.loadingService.isLoading.subscribe(value=> {\r\n      this.isLoading = value\r\n      this.ref.detectChanges()\r\n    })\r\n  }\r\n\r\n  title = 'Fleet Brother';\r\n  sideBarOpened: boolean = false;\r\n  isLoading : boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-container {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    .main-content{\r\n      height: 100vh;\r\n      display:flex;\r\n      flex-direction: column;\r\n\r\n      .app-content{\r\n        flex-grow: 1;\r\n        flex-shrink: 1;\r\n        overflow-y: scroll;\r\n        overflow-x: auto;\r\n      }\r\n    }\r\n}\r\n\r\n\r\n.spacer {\r\n    flex: 1 1 auto;\r\n}\r\n\r\n.loading {\r\n  position: absolute;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 1001;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firabaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firabaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"loading\" *ngIf=\"isLoading\">\r\n  <mat-spinner></mat-spinner>\r\n</div>\r\n\r\n<mat-sidenav-container class=\"app-container\">\r\n  <mat-sidenav mode=\"over\" [(opened)]=\"sideBarOpened\">\r\n  <app-sidebar [showAdmin]=\"this.loginService.user?.isAdmin ?? false\"></app-sidebar>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content class=\"main-content\">\r\n    <div class=\"toolbar\">\r\n      <mat-toolbar>\r\n        <button mat-icon-button (click)=\"sideBarOpened = !sideBarOpened\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n        <span>Fleet Brother</span>\r\n        <span class=\"spacer\"></span>\r\n        <button *ngIf=\"this.firabaseService.token == ''\" mat-icon-button (click)=\"this.firabaseService.requestPermission()\">\r\n          <mat-icon>notifications</mat-icon>\r\n        </button>\r\n      </mat-toolbar>\r\n    </div>\r\n    <div class=\"app-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>"
        },
        {
            "name": "CarAssigmentPageComponent",
            "id": "component-CarAssigmentPageComponent-bdfb128c730b247d5c7d44b01519fbc6e3a5309053b050a5c049bb5f21d644ae7b2041c62423c3a6d0e52c91b186855fe8cd66a175321ffcceda4da15ec13dbd",
            "file": "src/app/car-management/pages/car-assigment-page/car-assigment-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-car-assigment-page",
            "styleUrls": [
                "./car-assigment-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./car-assigment-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cars",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fleets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fleet[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "canAssign",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAccept",
                    "args": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAcceptedHandle",
                    "args": [
                        {
                            "name": "selectedFleet",
                            "type": "Fleet | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedFleet",
                            "type": "Fleet | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDecline",
                    "args": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { CarFleetAssigmentComponent } from '../../components/car-fleet-assigment/car-fleet-assigment.component';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-car-assigment-page',\r\n  templateUrl: './car-assigment-page.component.html',\r\n  styleUrls: ['./car-assigment-page.component.scss']\r\n})\r\nexport class CarAssigmentPageComponent implements OnInit {\r\n  cars : Car[] = []\r\n  fleets: Fleet[] = []\r\n\r\n  constructor(private _bottomSheet : MatBottomSheet, private fleetManagementService : FleetManagementService, private dialogService : MessageDialogService){\r\n      \r\n  }\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData(){\r\n    this.fleetManagementService.getNewcomerCars().subscribe(cars=> this.cars = cars)\r\n    this.fleetManagementService.getAllFleets().subscribe(\r\n      fleets => {this.fleets = fleets}\r\n    )\r\n  }\r\n\r\n  onAccept(car : Car){\r\n    const ref = this._bottomSheet.open(CarFleetAssigmentComponent, {data: { car: car, fleets: this.fleets }})\r\n    ref.afterDismissed().subscribe(result => this.onAcceptedHandle(result, car))\r\n  }\r\n\r\n  onDecline(car : Car){\r\n    const ref = this.dialogService.openChooseDialog(\"Decline car join request\", `Are you sure you want to decline the request for: #${car.id}: ${car.name}, License plate: ${car.licensePlate}, VIN: ${car.vin}`)\r\n    ref.afterClosed().subscribe((decision) => {\r\n      if(decision){\r\n        this.fleetManagementService.declineCarJoinRequest(car.id).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Car has not been added to any fleet.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  canAssign(){\r\n    return this.fleets.length > 0;\r\n  }\r\n\r\n  onAcceptedHandle(selectedFleet : Fleet | undefined, car : Car){\r\n    if(selectedFleet == null){\r\n      return;\r\n    }\r\n\r\n    this.fleetManagementService.acceptCarJoinRequest(car.id, selectedFleet.id).subscribe(\r\n      result => {\r\n        if(result){\r\n          this.dialogService.openSuccessDialog(\"Operation successful.\", \"Car has been added to fleet.\")\r\n        } else {\r\n          this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n        }\r\n        this.fetchData();\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n    margin: 2rem 2rem;\r\n}\r\n\r\n.car-overview {\r\n    margin: 24px 36px;\r\n}",
                    "styleUrl": "./car-assigment-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Car assignment</h1>\r\n\r\n<div class=\"car-overview\" *ngFor=\"let car of cars\">\r\n    <app-car-overview [car]=\"car\" (onAccept)=\"onAccept($event)\" (onDecline)=\"onDecline($event)\"[disabled]=\"!canAssign()\"></app-car-overview>\r\n</div>"
        },
        {
            "name": "CarFleetAssigmentComponent",
            "id": "component-CarFleetAssigmentComponent-2291fa48b844c6b12111de2739945db3833207aa19f7c219f703c49d03f8ed66c366cc5032bcca7074427b3cd10ef116305420fd469a2b70a88d93d795fdbd06",
            "file": "src/app/car-management/components/car-fleet-assigment/car-fleet-assigment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-car-fleet-assigment",
            "styleUrls": [
                "./car-fleet-assigment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./car-fleet-assigment.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "car",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Car | undefined",
                    "decorators": []
                },
                {
                    "name": "fleets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Fleet[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedFleet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fleet | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAssign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\n\r\n@Component({\r\n  selector: 'app-car-fleet-assigment',\r\n  templateUrl: './car-fleet-assigment.component.html',\r\n  styleUrls: ['./car-fleet-assigment.component.scss']\r\n})\r\nexport class CarFleetAssigmentComponent implements OnInit {\r\n  @Input() car : Car | undefined = undefined;\r\n  @Input() fleets : Fleet[] = [];\r\n\r\n  selectedFleet : Fleet | undefined;\r\n\r\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) data: {car: Car, fleets : Fleet[]}, private _bottomSheet : MatBottomSheet){\r\n    this.car = data.car;\r\n    this.fleets = data.fleets;\r\n  }\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  onAssign(){\r\n    this._bottomSheet.dismiss(this.selectedFleet);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fleet-assigment{\r\n    display: flex;\r\n    flex-direction: column;\r\n    .fleet-choice-container{\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./car-fleet-assigment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fleet-assigment\">\r\n    <div style=\"display: flex; align-items: center;\">\r\n        <h4 style=\"margin: 0px 16px 0px 0px;\">Car:</h4>\r\n    <mat-chip *ngIf=\"car != undefined\">\r\n        #{{car.id}}: {{car.name}},\r\n        License plate: {{car.licensePlate}},\r\n        VIN: {{car.vin}}\r\n    </mat-chip>\r\n    </div>\r\n    \r\n    <h1 style=\"margin: 16px 0px;\">Please select a fleet</h1>\r\n    <mat-radio-group [(ngModel)]=\"selectedFleet\" class=\"fleet-choice-container\">\r\n        <mat-radio-button *ngFor=\"let fleet of fleets\" [value]=\"fleet\">#{{fleet.id}}: {{fleet.name}}</mat-radio-button>\r\n    </mat-radio-group>\r\n\r\n    <button mat-raised-button color=\"primary\" style=\"margin-top: 16px;\" (click)=\"onAssign()\">Assign</button>\r\n</div>\r\n\r\n"
        },
        {
            "name": "CarOverviewComponent",
            "id": "component-CarOverviewComponent-f247fab6203429a1ca13b4ad9c10ebe7279e7ecf9097ceb31ba9039ade0f27ed64dc4e3f21920f97d7f13dde548f78d51b0c4f5d4dde1165a4d18ac2798c6367",
            "file": "src/app/car-management/components/car-overview/car-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-car-overview",
            "styleUrls": [
                "./car-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./car-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Car | undefined",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "CarOverviewMode.ACCEPT_DECLINE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "CarOverviewMode",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<Car>"
                },
                {
                    "name": "onAlerts",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<Car>"
                },
                {
                    "name": "onDecline",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<Car>"
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<Car>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modetype",
                    "defaultValue": "CarOverviewMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\n\r\nexport enum CarOverviewMode {\r\n  ACCEPT_DECLINE,\r\n  MANAGE,\r\n  REPORT,\r\n  DISPLAY\r\n}\r\n\r\n@Component({\r\n  selector: 'app-car-overview',\r\n  templateUrl: './car-overview.component.html',\r\n  styleUrls: ['./car-overview.component.scss']\r\n})\r\nexport class CarOverviewComponent {\r\n  modetype = CarOverviewMode;\r\n  @Input() mode : CarOverviewMode = CarOverviewMode.ACCEPT_DECLINE;\r\n\r\n  @Input() car : Car | undefined;\r\n  @Input() disabled : boolean = false;\r\n  @Output() onAccept : EventEmitter<Car> = new EventEmitter();\r\n  @Output() onDecline : EventEmitter<Car> = new EventEmitter();\r\n  @Output() onDelete : EventEmitter<Car> = new EventEmitter();\r\n  @Output() onAlerts : EventEmitter<Car> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".car-overview{\r\n    .car-overview-content{\r\n        .car-overview-tools {\r\n            .tools-accept-decline {\r\n                & > * {\r\n                    margin-right: 12px;\r\n                }\r\n            }\r\n            .tools-report {\r\n                & > * {\r\n                    margin-right: 12px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./car-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card *ngIf=\"car != null\" class=\"car-overview\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <p>#{{car.id}}: {{car.name}}</p>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            <p>License plate: {{car.licensePlate}}</p>\r\n            <p>VIN: {{car.vin}}</p>\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content class=\"car-overview-content\">\r\n        <div class=\"car-overview-tools\">\r\n            <div *ngIf=\"mode == modetype.ACCEPT_DECLINE\" class=\"tools-accept-decline\">\r\n                <button mat-fab color=\"accent\" (click)=\"onAccept.emit(car)\" [disabled]=\"disabled\">\r\n                    <mat-icon>done</mat-icon>\r\n                  </button>\r\n                <button mat-fab color=\"warn\" (click)=\"onDecline.emit(car)\" [disabled]=\"disabled\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </div>\r\n            <div *ngIf=\"mode == modetype.MANAGE\" class=\"tools-report\">\r\n                <button mat-fab color=\"primary\" [routerLink]=\"['/report', car.id]\" [disabled]=\"disabled\">\r\n                    <mat-icon>summarize</mat-icon>\r\n                </button>\r\n                <button mat-fab color=\"warn\" (click)=\"onDelete.emit(car)\" [disabled]=\"disabled\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n            <div *ngIf=\"mode == modetype.REPORT\">\r\n                <button mat-fab color=\"warn\" (click)=\"onAlerts.emit(car)\" [disabled]=\"disabled\">\r\n                    <mat-icon>notifications_active</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n  "
        },
        {
            "name": "CarReportingPageComponent",
            "id": "component-CarReportingPageComponent-a06ce8c574ebd7faafe49ee7f5fcee923998679cd672cb1806165758169aced6800b5b0a8463cf6056bdf67e6617a796451ec54d3c5889209f6411a68e794f62",
            "file": "src/app/car-reporting/pages/car-reporting-page/car-reporting-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-car-reporting-page",
            "styleUrls": [
                "./car-reporting-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./car-reporting-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Car | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "carId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "carOverviewMode",
                    "defaultValue": "CarOverviewMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "exportDisabled",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "schemas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Schema[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAlertButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAlertsDialog",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CarOverviewMode } from 'src/app/car-management/components/car-overview/car-overview.component';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { CarReportingService } from 'src/app/shared/services/car-reporting.service';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\nimport { exportExcel } from 'src/app/shared/util/excel.util';\r\nimport { AlertsManagerComponent } from '../../components/alerts-manager/alerts-manager.component';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Field } from 'src/app/data/dto/field.dto';\r\n\r\n@Component({\r\n  selector: 'app-car-reporting-page',\r\n  templateUrl: './car-reporting-page.component.html',\r\n  styleUrls: ['./car-reporting-page.component.scss']\r\n})\r\nexport class CarReportingPageComponent {\r\n  carId : number = 0;\r\n  car : Car | undefined;\r\n  schemas : Schema[] = []\r\n\r\n  exportDisabled : BehaviorSubject<boolean> = new BehaviorSubject(false)\r\n\r\n  carOverviewMode = CarOverviewMode\r\n\r\n  constructor(\r\n    private carReportingService : CarReportingService,\r\n    private fleetManagementService : FleetManagementService,\r\n    public dialog: MatDialog\r\n    ){}\r\n\r\n  @Input() set id(carId: string) {\r\n    this.carId = Number(carId);\r\n    this.fetchData()\r\n  }\r\n\r\n  fetchData() {\r\n    this.fleetManagementService.getCarById(this.carId).subscribe(car => {\r\n      this.car = car;\r\n    })\r\n    this.carReportingService.getSchemasForCar(Number(this.carId)).subscribe(schemas => {\r\n      this.schemas = schemas\r\n    })\r\n  }\r\n\r\n  export(schema : Schema, data : any[]){\r\n    this.exportDisabled.next(true)\r\n    exportExcel(data, schema.name);\r\n    this.exportDisabled.next(false)\r\n  }\r\n\r\n  onAlertButton(){\r\n    this.openAlertsDialog(this.schemas.flatMap(schema => schema.fields))\r\n  }\r\n\r\n  openAlertsDialog(fields : Field[]){\r\n    this.dialog.open(AlertsManagerComponent, {\r\n      data: {car: this.car, fields: fields},\r\n      minHeight: \"50%\",\r\n      minWidth: \"50%\"\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n    margin: 2rem 2rem;\r\n}\r\n\r\n.overview {\r\n    margin: 16px 16px;\r\n}\r\n\r\n.report {\r\n    margin: 16px 16px;\r\n}",
                    "styleUrl": "./car-reporting-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "carReportingService",
                        "type": "CarReportingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "carReportingService",
                        "type": "CarReportingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "carId",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "carId",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<h1>Report</h1>\r\n\r\n<div class=\"overview\">\r\n    <app-car-overview [car]=\"car\" [mode]=\"carOverviewMode.REPORT\" (onAlerts)=\"onAlertButton()\"></app-car-overview>\r\n</div>\r\n<div class=\"report\">\r\n    <mat-card>\r\n        <mat-tab-group mat-stretch-tabs=\"false\" mat-align-tabs=\"start\">\r\n            <mat-tab *ngFor=\"let schema of schemas\" [label]=\"schema.name\">\r\n                <ng-template matTabContent>\r\n                    <app-report [schema]=\"schema\" [car]=\"car\" (exportedData)=\"export(schema, $event)\" [exportDisabled]=\"exportDisabled | async\"></app-report>\r\n                </ng-template>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </mat-card>\r\n</div>"
        },
        {
            "name": "FieldCreationComponent",
            "id": "component-FieldCreationComponent-1c9dc8750afdfca23009bcda4f33fba06cbd6a4066f8ea45a4b3403e65958fa492e6e0dc6d10993ab086ee19b7f6fc4bf94c034a80189a76707e9cffcf5b3e81",
            "file": "src/app/schema-management/components/field-creation/field-creation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-field-creation",
            "styleUrls": [
                "./field-creation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field-creation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAddNewField",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<FieldCreationRequestBody>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "elementType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "key",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "fireOnAddNewField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FieldType } from 'src/app/data/dto/field.dto';\r\nimport { FieldCreationRequestBody } from 'src/app/data/requestbody/field-creation.dto';\r\n\r\n@Component({\r\n  selector: 'app-field-creation',\r\n  templateUrl: './field-creation.component.html',\r\n  styleUrls: ['./field-creation.component.scss']\r\n})\r\nexport class FieldCreationComponent {\r\n  key : string = \"\";\r\n  type : string = \"\";\r\n  elementType : string | null = null;\r\n\r\n  @Output() onAddNewField : EventEmitter<FieldCreationRequestBody> = new EventEmitter();\r\n\r\n  fireOnAddNewField(){\r\n    if(this.key == \"\" || this.type == \"\" || (this.type == \"list\" && this.elementType == \"\")){\r\n      return;\r\n    }\r\n    this.onAddNewField.emit({\r\n      key: this.key,\r\n      type: <FieldType> this.type,\r\n      elementType: <FieldType> this.elementType\r\n    })\r\n\r\n    this.key= \"\";\r\n    this.type = \"\";\r\n    this.elementType = null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\r\n    & > * {\r\n        margin-right: 16px\r\n    }\r\n}",
                    "styleUrl": "./field-creation.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card>\r\n    <mat-card-content class=\"content\">\r\n        <p>New field: </p>\r\n        <mat-form-field>\r\n            <mat-label>Key</mat-label>\r\n            <input matInput [(ngModel)]=\"key\">\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <mat-label>Type</mat-label>\r\n            <mat-select [(ngModel)]=\"type\">\r\n              <mat-option value=\"number\">Number</mat-option>\r\n              <mat-option value=\"string\">String</mat-option>\r\n              <mat-option value=\"boolean\">Boolean</mat-option>\r\n              <mat-option value=\"list\">List</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n    \r\n          <mat-form-field *ngIf=\"type == 'list'\">\r\n            <mat-label>Element type: </mat-label>\r\n            <mat-select [(ngModel)]=\"elementType\">\r\n                <mat-option value=\"number\">Number</mat-option>\r\n                <mat-option value=\"string\">String</mat-option>\r\n                <mat-option value=\"boolean\">Boolean</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <button mat-icon-button (click)=\"fireOnAddNewField()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n    </mat-card-content>\r\n    \r\n</mat-card>"
        },
        {
            "name": "FieldOverviewComponent",
            "id": "component-FieldOverviewComponent-e98c4bec9f76c33fe201d25da4ea24b3ac619fc9f55eb188678d341b8c09dc2b2c01f6026d6cdc7a87a9cd0e6d0a19622411b9737a479d487f194e505f2c8f56",
            "file": "src/app/schema-management/components/field-overview/field-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-field-overview",
            "styleUrls": [
                "./field-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Field | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<Field>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Field } from 'src/app/data/dto/field.dto';\r\n\r\n@Component({\r\n  selector: 'app-field-overview',\r\n  templateUrl: './field-overview.component.html',\r\n  styleUrls: ['./field-overview.component.scss']\r\n})\r\nexport class FieldOverviewComponent {\r\n  @Input() field : Field | undefined\r\n\r\n  @Output() onDelete : EventEmitter<Field> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".field-overview-content {\r\nmargin: 16px 16px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}",
                    "styleUrl": "./field-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card *ngIf=\"field != null\">\r\n    <div class=\"field-overview-content\">\r\n        <div>\r\n            <mat-card-title>\r\n                {{field.id}}: {{field.key}}\r\n            </mat-card-title>\r\n            <mat-card-subtitle>\r\n                Type: {{field.type}}\r\n                <div *ngIf=\"field.elementType != null\">\r\n                Element Type: {{field.elementType}}\r\n                </div>\r\n            </mat-card-subtitle>\r\n        </div>\r\n        <div>\r\n            <button mat-icon-button (click)=\"onDelete.emit(field)\">\r\n                <mat-icon>remove</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n</mat-card>\r\n"
        },
        {
            "name": "FleetManagementCreateComponent",
            "id": "component-FleetManagementCreateComponent-fa73687800b50731f024cc37ca47cd5b44d39eeed4a0f36ceb53d178914d774ae57155ee90e1cf6b277250ad0e9ed3e775858652f2315424095a43133fa50ced",
            "file": "src/app/fleet-management/components/fleet-management-create/fleet-management-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fleet-management-create",
            "styleUrls": [
                "./fleet-management-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fleet-management-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputDescription",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "inputName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fleet-management-create',\r\n  templateUrl: './fleet-management-create.component.html',\r\n  styleUrls: ['./fleet-management-create.component.scss']\r\n})\r\nexport class FleetManagementCreateComponent {\r\n  inputName : string = \"\";\r\n  inputDescription : string = \"\"\r\n\r\n  constructor(private bottomSheetRef : MatBottomSheetRef<FleetManagementCreateComponent>){\r\n\r\n  }\r\n\r\n  onSubmit(){\r\n    this.bottomSheetRef.dismiss({\r\n      name: this.inputName,\r\n      description: this.inputDescription\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fleet-create-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n}",
                    "styleUrl": "./fleet-management-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<FleetManagementCreateComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<FleetManagementCreateComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"fleet-create-content\">\r\n    <h1>Create a new fleet</h1>\r\n    <mat-form-field appearance=\"outline\">\r\n        <mat-label>Name</mat-label>\r\n        <input [(ngModel)]=\"inputName\" matInput placeholder=\"My company fleet...\">\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n        <mat-label>Description</mat-label>\r\n        <textarea [(ngModel)]=\"inputDescription\" matInput placeholder=\"Description...\"></textarea>\r\n    </mat-form-field>\r\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Create</button>\r\n</div>"
        },
        {
            "name": "FleetManagementPageComponent",
            "id": "component-FleetManagementPageComponent-a2233a6363a4e745c8cd4ad6bd671886d870820d929b528a815402f0d6f14bf7dd88b2651fd09f36274854501c99d542bb3fbb331dc2b12321d2a1fa5cbfd0be",
            "file": "src/app/fleet-management/pages/fleet-management-page/fleet-management-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fleet-management-page",
            "styleUrls": [
                "./fleet-management-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fleet-management-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fleets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fleet[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeletePressed",
                    "args": [
                        {
                            "name": "fleet",
                            "type": "Fleet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fleet",
                            "type": "Fleet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDetailsPressed",
                    "args": [
                        {
                            "name": "fleet",
                            "type": "Fleet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fleet",
                            "type": "Fleet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreatePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { FleetManagementCreateComponent } from '../../components/fleet-management-create/fleet-management-create.component';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\r\nimport { Router } from '@angular/router';\r\nimport { FleetCreationRequestBody } from 'src/app/data/requestbody/fleet-creation.dto';\r\n\r\n@Component({\r\n  selector: 'app-fleet-management-page',\r\n  templateUrl: './fleet-management-page.component.html',\r\n  styleUrls: ['./fleet-management-page.component.scss']\r\n})\r\nexport class FleetManagementPageComponent implements OnInit {\r\n  fleets : Fleet[] = []\r\n\r\n  constructor(\r\n    private _bottomSheet: MatBottomSheet, \r\n    private fleetManagementService : FleetManagementService, \r\n    private dialogService : MessageDialogService,\r\n    private routerService : Router){\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n  \r\n  fetchData(){\r\n    this.fleetManagementService.getAllFleets().subscribe(\r\n      fleets => {this.fleets = fleets}\r\n    )\r\n  }\r\n\r\n  openCreatePanel(){\r\n    const ref = this._bottomSheet.open(FleetManagementCreateComponent)\r\n    ref.afterDismissed().subscribe((fleet : FleetCreationRequestBody) => {\r\n      if(fleet != null && fleet.name != null){\r\n        this.fleetManagementService.createFleet(fleet).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Fleet has been created.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onDeletePressed(fleet : Fleet){\r\n    const ref = this.dialogService.openChooseDialog(\"Delete fleet\", `Are you sure you want to delete fleet: #${fleet.id}: ${fleet.name}?`);\r\n    ref.afterClosed().subscribe(decision => {\r\n      if(decision){\r\n        this.fleetManagementService.deleteFleet(fleet.id).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Fleet has been deleted.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onDetailsPressed(fleet : Fleet){\r\n    this.routerService.navigate([\"fleet\", fleet.id.toString(), \"details\"])\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n    margin: 2rem 2rem;\r\n}\r\n\r\n.fab {\r\n    position: fixed;\r\n    bottom: 16px;\r\n    right: 16px;\r\n    z-index: 1;\r\n}\r\n\r\n.fleet-overview {\r\n    margin: 24px 24px;\r\n    div {\r\n        margin: 24px 36px;\r\n    }\r\n}",
                    "styleUrl": "./fleet-management-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Fleets</h1>\r\n\r\n<button mat-fab color=\"primary\" class=\"fab\" (click)=\"openCreatePanel()\">\r\n    <mat-icon>create</mat-icon>\r\n</button>\r\n\r\n<div class=\"fleet-overview\">\r\n    <div *ngFor=\"let fleet of fleets\">\r\n        <app-fleet-overview [fleet]=\"fleet\" (onDelete)=\"onDeletePressed($event)\" (onDetails)=\"onDetailsPressed($event)\"></app-fleet-overview>\r\n    </div>\r\n</div>\r\n   "
        },
        {
            "name": "FleetOverviewComponent",
            "id": "component-FleetOverviewComponent-add68d29f946b0488ef9b69e1dee2f57fddcf0269c5fc5af043cd1077d8594bacafc2da05d4f5e2e5d80d55db5da8e92e6bc82eb2bc48c373cee621720de19b1",
            "file": "src/app/fleet-management/components/fleet-overview/fleet-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fleet-overview",
            "styleUrls": [
                "./fleet-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fleet-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fleet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Fleet | undefined",
                    "decorators": []
                },
                {
                    "name": "showDeleteButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showDetailsButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<Fleet>"
                },
                {
                    "name": "onDetails",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<Fleet>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\n\r\n@Component({\r\n  selector: 'app-fleet-overview',\r\n  templateUrl: './fleet-overview.component.html',\r\n  styleUrls: ['./fleet-overview.component.scss']\r\n})\r\nexport class FleetOverviewComponent {\r\n  @Input() fleet : Fleet | undefined;\r\n\r\n  @Input() showDeleteButton : boolean = true;\r\n  @Input() showDetailsButton : boolean = true; \r\n\r\n  @Output() onDelete : EventEmitter<Fleet> = new EventEmitter();\r\n  @Output() onDetails : EventEmitter<Fleet> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fleet-overview {\r\n    .fleet-overview-content {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        .fleet-overview-details {\r\n            flex-grow: 1;\r\n            flex-shrink: 1;\r\n            margin-right: 24px;\r\n        }\r\n        .fleet-overview-tools {\r\n            & > * {\r\n                margin-left: 5px;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./fleet-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card *ngIf=\"fleet != null\" class=\"fleet-overview\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            {{fleet.name}}\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            {{fleet.id}}\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content class=\"fleet-overview-content\">\r\n        <div class=\"fleet-overview-details\">\r\n            <p>{{fleet.description}}</p>\r\n        <!-- <mat-divider></mat-divider>\r\n        <mat-expansion-panel>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    List of cars:\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <p>This is the primary content of the panel.</p>\r\n        </mat-expansion-panel> -->\r\n        </div>\r\n        <div class=\"fleet-overview-tools\">\r\n            <button *ngIf=\"showDetailsButton\" mat-fab color=\"primary\" (click)=\"onDetails.emit(fleet)\">\r\n                <mat-icon>directions_car</mat-icon>\r\n            </button>\r\n            <button *ngIf=\"showDeleteButton\" mat-fab color=\"warn\" (click)=\"onDelete.emit(fleet)\">\r\n                <mat-icon>delete</mat-icon>\r\n            </button>\r\n        </div>  \r\n    </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "FleetViewPageComponent",
            "id": "component-FleetViewPageComponent-ea818aebe809cc58b2eff80308f0d8634df587ee5eaabc3a4042a69a028220a9de96fd34cc0a3837b5c2e55fe1f22691f5f3b6fb1a34d755a8f554961ecf0370",
            "file": "src/app/fleet-management/pages/fleet-view-page/fleet-view-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fleet-view-page",
            "styleUrls": [
                "./fleet-view-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fleet-view-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carOverviewModes",
                    "defaultValue": "CarOverviewMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fleet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fleet | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fleetId",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeletePressed",
                    "args": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "car",
                            "type": "Car",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { switchMap } from 'rxjs';\r\nimport { CarOverviewMode } from 'src/app/car-management/components/car-overview/car-overview.component';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Fleet } from 'src/app/data/dto/fleet.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-fleet-view-page',\r\n  templateUrl: './fleet-view-page.component.html',\r\n  styleUrls: ['./fleet-view-page.component.scss']\r\n})\r\nexport class FleetViewPageComponent{\r\n  fleetId: string = \"\";\r\n  fleet : Fleet | undefined;\r\n\r\n  carOverviewModes = CarOverviewMode;\r\n\r\n  constructor(\r\n    private fleetManagementService : FleetManagementService,\r\n    private dialogService : MessageDialogService\r\n    ){\r\n\r\n  }\r\n  @Input() set id(fleetId: string) {\r\n    this.fleetId = fleetId;\r\n    this.fetchData()\r\n  }\r\n\r\n  fetchData(){\r\n    this.fleetManagementService.getFleetById(Number(this.fleetId)).subscribe(fleet => {this.fleet = fleet})\r\n  }\r\n\r\n  onDeletePressed(car : Car){\r\n    const ref = this.dialogService.openChooseDialog(\"Remove car from fleet\", `Are you sure you want remove car (#${car.id}: ${car.name}, License plate: ${car.licensePlate}, VIN: ${car.vin}) from fleet (#${this.fleet?.id}: ${this.fleet?.name})?`)\r\n    ref.afterClosed().subscribe(decision => {\r\n      if(decision){\r\n        this.fleetManagementService.removeCarFromFleet(car.id, this.fleet?.id ?? 0).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Car has been removed from fleet.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData()\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fleet-overview {\r\n    margin: 24px 36px;\r\n}\r\n\r\n.fleet-car-overview {\r\n    .car-overview {\r\n        margin: 24px 36px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./fleet-view-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "fleetId",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "fleetId",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"fleet-overview\">\r\n    <app-fleet-overview [fleet]=\"fleet\" [showDetailsButton]=\"false\" [showDeleteButton]=\"false\"></app-fleet-overview>\r\n</div>\r\n\r\n<div class=\"fleet-car-overview\" *ngIf=\"fleet != null\">\r\n    <div class=\"car-overview\" *ngFor=\"let car of fleet.cars\">\r\n        <app-car-overview [car]=\"car\" [mode]=\"carOverviewModes.MANAGE\" (onDelete)=\"onDeletePressed($event)\"></app-car-overview>\r\n    </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-b6efd22982d9888e7192b90e9e1e7cf911f8cdee09115716fcecf00beaeb18074751afa1dfe45d9919843ee2be4174b7851bacd6f858ea8a5430bc6b42c0e676",
            "file": "src/app/login/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputPassword",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "inputUsername",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { LoginService } from 'src/app/shared/services/login.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent implements OnInit {\n  constructor(\n    private loginService : LoginService,\n    private router : Router\n    ){\n    \n  }\n  inputUsername : string = \"\"\n  inputPassword : string = \"\"\n\n  ngOnInit(): void {\n    this.loginService.login().subscribe(\n      loggedIn => {\n        if(loggedIn){\n          this.onLoggedIn()\n        }\n      }\n    );\n  }\n\n  onSubmit(){\n    if(this.inputUsername != null && this.inputPassword != null){\n      this.loginService.loginWithCredentials(this.inputUsername, this.inputPassword).subscribe(\n        loggedIn => {\n          if(loggedIn){\n            this.onLoggedIn()\n          }\n        }\n      )\n    }\n  }\n\n  onLoggedIn(){\n    this.router.navigate([\"/\"])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-login{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: 16px;\r\n    & > * {\r\n        flex: 1 1 auto\r\n    }\r\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"user-login\">\n    <mat-form-field>\n        <mat-label>Username</mat-label>\n        <input [(ngModel)]=\"inputUsername\" matInput>\n    </mat-form-field>\n    \n    <mat-form-field>\n        <mat-label>Password</mat-label>\n        <input [(ngModel)]=\"inputPassword\" type=\"password\" matInput>\n    </mat-form-field>\n\n    <button mat-icon-button (click)=\"onSubmit()\">\n        <mat-icon>login</mat-icon>\n    </button>\n</div>"
        },
        {
            "name": "MessageDialogComponent",
            "id": "component-MessageDialogComponent-8c261a34ee899cd38f665cc09ec5620c39a91877ccf88bddceb5cce88e81c99ece7f68cf63946cd7e5f1408931c5cb6a810c065e0b2da189c817585aeb1fce06",
            "file": "src/app/shared/components/message-dialog/message-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message-dialog",
            "styleUrls": [
                "./message-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<MessageDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-message-dialog',\r\n  templateUrl: './message-dialog.component.html',\r\n  styleUrls: ['./message-dialog.component.scss']\r\n})\r\nexport class MessageDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MessageDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: {title: string, body: string, error: boolean, decision: boolean}){\r\n      \r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MessageDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MessageDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1 mat-dialog-title>{{data.title}}</h1>\r\n<div mat-dialog-content>\r\n    <mat-icon *ngIf=\"!data.error && !data.decision\" color=\"accent\">check_circle</mat-icon>\r\n    <mat-icon *ngIf=\"data.error && !data.decision\" color=\"warn\">error</mat-icon>\r\n    <mat-icon *ngIf=\"data.decision\">help_outline</mat-icon>\r\n    <h2>{{data.body}}</h2>\r\n    <div *ngIf=\"!data.decision\">\r\n        <button mat-button (click)=\"dialogRef.close(true)\">Ok</button>\r\n    </div>\r\n    <div *ngIf=\"data.decision\">\r\n        <button mat-button (click)=\"dialogRef.close(true)\">Yes</button>\r\n        <button mat-button (click)=\"dialogRef.close(false)\">No</button>\r\n    </div>\r\n    \r\n</div>"
        },
        {
            "name": "ReportComponent",
            "id": "component-ReportComponent-336635232ec0725985410b5fc4c62dcad96b619cedc399237f0f7e7da05ae199d7a921f8d3938b46ed9d16837597ea32f4aab6ccbe56c4e810b3a88b26973733",
            "file": "src/app/car-reporting/components/report/report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-report",
            "styleUrls": [
                "./report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./report.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "car",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Car | undefined",
                    "decorators": []
                },
                {
                    "name": "exportDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Schema | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "exportedData",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\"timestamp\", \"data\", \"alerts\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "measurements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Measurement[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rawData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "convertData",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copy",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAlertsText",
                    "args": [
                        {
                            "name": "alerts",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alerts",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Alert } from 'src/app/data/dto/alert.dto';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Measurement } from 'src/app/data/dto/measurement.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { CarReportingService } from 'src/app/shared/services/car-reporting.service';\r\n\r\n@Component({\r\n  selector: 'app-report',\r\n  templateUrl: './report.component.html',\r\n  styleUrls: ['./report.component.scss']\r\n})\r\nexport class ReportComponent implements OnChanges, AfterViewInit {\r\n  @Input() car : Car | undefined;\r\n  @Input() schema : Schema | undefined;\r\n  @Input() exportDisabled :boolean | null = false;\r\n  @Output() exportedData : EventEmitter<any[]> = new EventEmitter();\r\n\r\n  measurements : Measurement[] = []\r\n  rawData : any[] = []\r\n  displayedColumns: string[] = [\"timestamp\", \"data\", \"alerts\"];\r\n  dataSource : MatTableDataSource<any> = new MatTableDataSource();\r\n\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  constructor(private carReportingService : CarReportingService){}\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if(this.car != null && this.schema != null){\r\n      this.fetchData()\r\n      const index = this.displayedColumns.indexOf(\"data\")\r\n      this.displayedColumns.splice(index, 1, ...(this.schema.fields.map(schema => schema.key)))\r\n    }\r\n  }\r\n\r\n  fetchData(){\r\n    this.carReportingService.getMeasurements(this.car!.id, this.schema!.id).subscribe(measurements =>{\r\n      this.measurements = measurements\r\n      this.rawData = measurements.map(m => {\r\n        let obj = {...({timestamp: m.timestamp}), ...(m.data), ...({alerts: m.alerts.map(alert => alert.name)})}\r\n        return obj;\r\n      })\r\n      this.dataSource.data = this.rawData\r\n    })\r\n  }\r\n\r\n  export(){\r\n    this.exportedData.emit(this.copy(this.rawData))\r\n  }\r\n\r\n  convertData(element : any){\r\n    if(element instanceof Array){\r\n      return element.join(\", \")\r\n    }\r\n    return element?.toString() ?? \"\";\r\n  }\r\n\r\n  getAlertsText(alerts : string[]){\r\n    return alerts.join(\"\\n\")\r\n  }\r\n\r\n  copy(data : any){\r\n    return JSON.parse(JSON.stringify(data));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".report-tools {\r\n    display: flex;\r\n    flex-direction: row;\r\n    button {\r\n        margin: 8px 16px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "carReportingService",
                        "type": "CarReportingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "carReportingService",
                        "type": "CarReportingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"report-tools\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"export()\" [disabled]=\"exportDisabled != null && exportDisabled\">\r\n        <mat-icon>save</mat-icon>\r\n        Export\r\n    </button>\r\n</div>\r\n\r\n<table *ngIf=\"schema != null\" mat-table [dataSource]=\"dataSource\" matSort>\r\n    <ng-container matColumnDef=\"timestamp\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>timestamp </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.timestamp | date: 'yyyy. MM. dd: HH:mm:ss.SSS z'}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container *ngFor=\"let field of schema.fields\" [matColumnDef]=\"field.key\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>{{field.key}} </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{convertData(element[field.key])}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"alerts\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>alerts </th>\r\n        <td mat-cell *matCellDef=\"let element\">\r\n            <div *ngIf=\"element.alerts != null && element.alerts != ''\">\r\n                <button mat-icon-button color=\"warn\" [matTooltip]=\"getAlertsText(element.alerts)\" matTooltipClass=\"mat-tooltip\">\r\n                    <mat-icon>notifications</mat-icon>\r\n                </button>\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>"
        },
        {
            "name": "SchemaCarAssigmentComponent",
            "id": "component-SchemaCarAssigmentComponent-630a6bfbe53f5549783574acf9944d68152e265919154b119a6e6538ca9855fa1270c061e59219b2537b228d3c4b40e75de5e73f73f7eb89b5f9a67473427ae0",
            "file": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schema-car-assigment",
            "styleUrls": [
                "./schema-car-assigment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schema-car-assigment.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckboxModel[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Schema | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAssign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { FleetManagementService } from 'src/app/shared/services/fleet-management.service';\r\n\r\nclass CheckboxModel {\r\n  car!: Car;\r\n  checked : boolean = false;\r\n}\r\n\r\nexport interface SchemaCarAssigmentOutput{\r\n    add : Car[]\r\n    remove: Car[]\r\n    schema: Schema\r\n}\r\n\r\n@Component({\r\n  selector: 'app-schema-car-assigment',\r\n  templateUrl: './schema-car-assigment.component.html',\r\n  styleUrls: ['./schema-car-assigment.component.scss']\r\n})\r\nexport class SchemaCarAssigmentComponent implements OnInit {\r\n  model : CheckboxModel[] = []\r\n\r\n  schema : Schema | undefined;\r\n\r\n  constructor(\r\n    private fleetManagementService : FleetManagementService,\r\n    private bottomSheetRef : MatBottomSheetRef<SchemaCarAssigmentComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) data: {schema: Schema}\r\n  ) {\r\n    this.schema = data.schema\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getModel()\r\n  }\r\n  \r\n  getModel(){\r\n    this.fleetManagementService.getAllCars().subscribe(\r\n      cars => {\r\n        this.model = cars.map(car => {\r\n          return {\r\n            car: car,\r\n            checked: this.schema!.carIds.some(carId => carId == car.id)\r\n          }\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  onAssign(){\r\n    this.bottomSheetRef.dismiss({\r\n      add: this.model.filter(entry=> entry.checked).map(entry => entry.car),\r\n      remove: this.model.filter(entry=> entry.checked == false).map(entry => entry.car),\r\n      schema: this.schema\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./schema-car-assigment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<SchemaCarAssigmentComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fleetManagementService",
                        "type": "FleetManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<SchemaCarAssigmentComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    <h1>Assign schema to car</h1>\r\n    <div *ngFor=\"let entry of model\">\r\n        <mat-checkbox class=\"example-margin\"\r\n                  [checked]=\"entry.checked\"\r\n                  (change)=\"entry.checked = $event.checked\">\r\n      #{{entry.car.id}}: {{entry.car.name}} ({{entry.car.licensePlate}}, VIN: {{entry.car.vin}})\r\n    </mat-checkbox>\r\n    </div>\r\n    <button mat-raised-button color=\"primary\" style=\"margin-top: 16px;\" (click)=\"onAssign()\">Assign</button>\r\n</div>"
        },
        {
            "name": "SchemaCreateComponent",
            "id": "component-SchemaCreateComponent-48a91a7fed2db0577ba305fc2f4a46bad96a94a6edfd68e232366e2c9322ec5c00c94bc87f53a9fbfeeceb2113be7250401dcd3a4378d36e526b92fb1bff8e12",
            "file": "src/app/schema-management/components/schema-create/schema-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schema-create",
            "styleUrls": [
                "./schema-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schema-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\n\r\n@Component({\r\n  selector: 'app-schema-create',\r\n  templateUrl: './schema-create.component.html',\r\n  styleUrls: ['./schema-create.component.scss']\r\n})\r\nexport class SchemaCreateComponent {\r\n  inputName : string = \"\";\r\n\r\n  constructor(private bottomSheetRef : MatBottomSheetRef<SchemaCreateComponent>){\r\n\r\n  }\r\n\r\n  onSubmit(){\r\n    this.bottomSheetRef.dismiss({\r\n      name: this.inputName,\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".schema-create-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n}",
                    "styleUrl": "./schema-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<SchemaCreateComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<SchemaCreateComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"schema-create-content\">\r\n    <h1>Create a schema</h1>\r\n    <mat-form-field appearance=\"outline\">\r\n        <mat-label>Name</mat-label>\r\n        <input [(ngModel)]=\"inputName\" matInput>\r\n    </mat-form-field>\r\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Create</button>\r\n</div>"
        },
        {
            "name": "SchemaManagementPageComponent",
            "id": "component-SchemaManagementPageComponent-d1733ea048293880a34083922bcb40a9743d2323c0cc84bf7a17d699193509daae307aa15d91480b731e11ced958a3222099762e7f57ebdba907324844abfbc3",
            "file": "src/app/schema-management/pages/schema-management-page/schema-management-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schema-management-page",
            "styleUrls": [
                "./schema-management-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schema-management-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "schemas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Schema[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddNewField",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteField",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteSchema",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAssignPanel",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreatePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { SchemaManagementService } from 'src/app/shared/services/schema-management.service';\r\nimport { SchemaCreateComponent } from '../../components/schema-create/schema-create.component';\r\nimport { SchemaCreationRequestBody } from 'src/app/data/requestbody/schema-creation.dto';\r\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\r\nimport { FieldCreationRequestBody } from 'src/app/data/requestbody/field-creation.dto';\r\nimport { Field } from 'src/app/data/dto/field.dto';\r\nimport { SchemaCarAssigmentComponent, SchemaCarAssigmentOutput } from '../../components/schema-car-assigment/schema-car-assigment.component';\r\nimport { Car } from 'src/app/data/dto/car.dto';\r\n\r\n@Component({\r\n  selector: 'app-schema-management-page',\r\n  templateUrl: './schema-management-page.component.html',\r\n  styleUrls: ['./schema-management-page.component.scss']\r\n})\r\nexport class SchemaManagementPageComponent {\r\n  schemas : Schema[] = []\r\n\r\n  constructor(\r\n    private schemaService : SchemaManagementService,\r\n    private _bottomSheet: MatBottomSheet,\r\n    private dialogService : MessageDialogService\r\n    ){\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.fetchData()\r\n  }\r\n  fetchData() {\r\n    this.schemaService.getAllSchemas().subscribe(\r\n      result => {this.schemas = result}\r\n    )\r\n  }\r\n\r\n  openCreatePanel(){\r\n    const ref = this._bottomSheet.open(SchemaCreateComponent)\r\n    ref.afterDismissed().subscribe((schema : SchemaCreationRequestBody) => {\r\n      if(schema != null && schema.name != null){\r\n        this.schemaService.createSchema(schema).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Schema has been created.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  openAssignPanel(schema : Schema){\r\n    const ref = this._bottomSheet.open(SchemaCarAssigmentComponent, {data: {schema: schema}})\r\n    ref.afterDismissed().subscribe((data : SchemaCarAssigmentOutput) => {\r\n      if(data != null && data.add != null && data.remove != null && data.schema != null){\r\n        this.schemaService.assignSchemaToCar(data.schema.id, data.add.map(cars => cars.id), data.remove.map(cars => cars.id)).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Cars have been assigned to schema.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onAddNewField(schema: Schema, field : FieldCreationRequestBody){\r\n    this.schemaService.addFieldToSchema(schema.id, field).subscribe(result => {\r\n      if(result){\r\n        this.dialogService.openSuccessDialog(\"Operation successful.\", \"Field has been added to schema.\")\r\n      } else {\r\n        this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n      }\r\n      this.fetchData();\r\n    })\r\n  }\r\n\r\n  onDeleteField(schema: Schema, field : Field){\r\n    const ref = this.dialogService.openChooseDialog(\"Delete field\", `Are you sure you want to delete field: ${schema.name}: ${field.key}?`);\r\n    ref.afterClosed().subscribe(decision => {\r\n      if(decision){\r\n        this.schemaService.removeFieldFromSchema(schema.id, field.id).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Field has been removed from schema.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onDeleteSchema(schema: Schema){\r\n    const ref = this.dialogService.openChooseDialog(\"Delete schema\", `Are you sure you want to delete schema: ${schema.id}: ${schema.name}?`);\r\n    ref.afterClosed().subscribe(decision => {\r\n      if(decision){\r\n        this.schemaService.deleteSchema(schema.id).subscribe(result => {\r\n          if(result){\r\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"Schema has been deleted.\")\r\n          } else {\r\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\r\n          }\r\n          this.fetchData();\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n    margin: 2rem 2rem;\r\n}\r\n\r\n.fab {\r\n    position: fixed;\r\n    bottom: 16px;\r\n    right: 16px;\r\n    z-index: 1;\r\n}",
                    "styleUrl": "./schema-management-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "schemaService",
                        "type": "SchemaManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "schemaService",
                        "type": "SchemaManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1>Schema Management</h1>\r\n\r\n<button mat-fab color=\"primary\" class=\"fab\" (click)=\"openCreatePanel()\">\r\n    <mat-icon>create</mat-icon>\r\n</button>\r\n\r\n<div>\r\n    <div *ngFor=\"let schema of schemas\">\r\n        <app-schema-overview [schema]=\"schema\" (onAddNewField)=\"onAddNewField(schema, $event)\" (onDeleteField)=\"onDeleteField(schema, $event)\" (onDeleteSchema)=\"onDeleteSchema($event)\" (onAssignCar)=\"openAssignPanel($event)\"></app-schema-overview>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SchemaOverviewComponent",
            "id": "component-SchemaOverviewComponent-16476708a538228e2421819b484636df60913c4499752e2315158d9c2a1c66e42db7de619ce58ed787db0c5feb3beed3bf04b10b1e5dc43aaa399fbb0bb40a35",
            "file": "src/app/schema-management/components/schema-overview/schema-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schema-overview",
            "styleUrls": [
                "./schema-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schema-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Schema | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAddNewField",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<FieldCreationRequestBody>"
                },
                {
                    "name": "onAssignCar",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<Schema>"
                },
                {
                    "name": "onDeleteField",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<Field>"
                },
                {
                    "name": "onDeleteSchema",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<Schema>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAddNewFieldFired",
                    "args": [
                        {
                            "name": "rb",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rb",
                            "type": "FieldCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAssignCarFired",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteFieldFired",
                    "args": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteSchemaFired",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Schema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Field } from 'src/app/data/dto/field.dto';\r\nimport { Schema } from 'src/app/data/dto/schema.dto';\r\nimport { FieldCreationRequestBody } from 'src/app/data/requestbody/field-creation.dto';\r\n\r\n@Component({\r\n  selector: 'app-schema-overview',\r\n  templateUrl: './schema-overview.component.html',\r\n  styleUrls: ['./schema-overview.component.scss']\r\n})\r\nexport class SchemaOverviewComponent {\r\n  @Input() schema : Schema | undefined;\r\n\r\n  @Output() onAddNewField : EventEmitter<FieldCreationRequestBody> = new EventEmitter();\r\n  @Output() onDeleteField : EventEmitter<Field> = new EventEmitter();\r\n  @Output() onDeleteSchema : EventEmitter<Schema> = new EventEmitter();\r\n  @Output() onAssignCar : EventEmitter<Schema> = new EventEmitter();\r\n\r\n  onAddNewFieldFired(rb : FieldCreationRequestBody){\r\n    this.onAddNewField.emit(rb)\r\n  }\r\n\r\n  onDeleteFieldFired(field : Field){\r\n    this.onDeleteField.emit(field);\r\n  }\r\n\r\n  onDeleteSchemaFired(schema : Schema){\r\n    this.onDeleteSchema.emit(schema);\r\n  }\r\n\r\n  onAssignCarFired(schema : Schema){\r\n    this.onAssignCar.emit(schema);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".schema-overview {\r\n    margin: 16px;\r\n    .schema-overview-content {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: baseline;\r\n        .schema-overview-data {\r\n            flex: 1 1 auto;\r\n        }\r\n        .schema-overview-tools {\r\n            flex: 0 0 auto;\r\n            margin: 16px;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./schema-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card class=\"schema-overview\" *ngIf=\"schema != null\">\r\n    <div class=\"schema-overview-content\">\r\n        <div class=\"schema-overview-data\">\r\n            <mat-card-header>\r\n                <mat-card-title>\r\n                    {{schema.name}}\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    ID: {{schema.id}}\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n        \r\n            <mat-card-content>\r\n                <div *ngFor=\"let field of schema.fields\">\r\n                    <app-field-overview [field]=\"field\" (onDelete)=\"onDeleteFieldFired($event)\"></app-field-overview>\r\n                </div>\r\n                <div>\r\n                    <app-field-creation (onAddNewField)=\"onAddNewFieldFired($event)\"></app-field-creation>\r\n                </div>\r\n            </mat-card-content>\r\n        </div>\r\n        <div class=\"schema-overview-tools\">\r\n            <button mat-icon-button (click)=\"onDeleteSchemaFired(schema)\">\r\n                <mat-icon>delete</mat-icon>\r\n            </button>\r\n            <button mat-icon-button (click)=\"onAssignCarFired(schema)\">\r\n                <mat-icon>directions_car</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n</mat-card>\r\n    "
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-8679f66353cb4302de34eab614d7b328f2216bc31b1f0d8de4fd4cbc6cdc2e7676cf4c2a5b04e4ebd06dfe2cf66a9f16ba3784970ec556f873052209e7fa3824",
            "file": "src/app/shared/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent {\r\n  @Input() showAdmin = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-nav-list>\r\n    <mat-list-item routerLink=\"fleet\">Fleet Management</mat-list-item>\r\n    <mat-list-item routerLink=\"newcomers\">Car Assigment</mat-list-item>\r\n    <mat-list-item routerLink=\"schema\">Schema Management</mat-list-item>\r\n    <mat-list-item *ngIf=\"showAdmin\" routerLink=\"users\">User Management</mat-list-item>\r\n</mat-nav-list>\r\n"
        },
        {
            "name": "UserCreateComponent",
            "id": "component-UserCreateComponent-80697997379f4e6509d323042fff29f7f2139a2842c5296e49c9f65c313ce207a61295788154cca5a5f1013667f436ed0a0f8fe593f3ec2fa6ddbad8334a4fcc",
            "file": "src/app/user-management/components/user-create/user-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-create",
            "styleUrls": [
                "./user-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onCreate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<UserCreationRequestBody>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputEmail",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inputIsAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "inputPassword",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "OnSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { UserCreationRequestBody } from 'src/app/data/requestbody/user-creation.dto';\n\n@Component({\n  selector: 'app-user-create',\n  templateUrl: './user-create.component.html',\n  styleUrls: ['./user-create.component.scss']\n})\nexport class UserCreateComponent {\n  inputEmail : string = \"\"\n  inputPassword : string = \"\"\n  inputIsAdmin : boolean = false\n\n  @Output() onCreate : EventEmitter<UserCreationRequestBody> = new EventEmitter()\n\n  OnSubmit(){\n    if(this.inputEmail != \"\" && this.inputPassword != \"\"){\n      this.onCreate.emit({\n        email: this.inputEmail,\n        password: this.inputPassword,\n        isAdmin: this.inputIsAdmin\n      })\n\n      this.inputEmail = \"\"\n      this.inputPassword = \"\"\n      this.inputIsAdmin = false\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-create {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-start;\r\n    & > * {\r\n        margin-right: 8px;\r\n    }\r\n\r\n    .align{\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        margin-top: 4px;\r\n        & > * {\r\n            margin-right: 8px;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./user-create.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"user-create\">\n    <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input type=\"email\" [(ngModel)]=\"inputEmail\" matInput>\n    </mat-form-field>\n    \n    <mat-form-field>\n        <mat-label>Password</mat-label>\n        <input [(ngModel)]=\"inputPassword\" type=\"password\" matInput>\n    </mat-form-field>\n\n    <div class=\"align\">\n        <mat-checkbox [(ngModel)]=\"inputIsAdmin\"> Is Admin\n        </mat-checkbox>\n        \n        <button mat-icon-button (click)=\"OnSubmit()\">\n            <mat-icon>create</mat-icon>\n        </button>\n    </div>\n</div>"
        },
        {
            "name": "UserCreationPageComponent",
            "id": "component-UserCreationPageComponent-0da9b5ec1edc1d4bb62fec7a693f12d4e07c8d779506829ecb939678a23a37912403c0c8b55d5325553d26e40c9bf4e152dde8962bd1db87303de3b9ccf91188",
            "file": "src/app/user-management/pages/user-creation-page/user-creation-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-creation-page",
            "styleUrls": [
                "./user-creation-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-creation-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserCreationRequestBody",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/data/dto/user.dto';\nimport { UserCreationRequestBody } from 'src/app/data/requestbody/user-creation.dto';\nimport { MessageDialogService } from 'src/app/shared/services/message-dialog.service';\nimport { UserManagementService } from 'src/app/shared/services/user-management.service';\n\n@Component({\n  selector: 'app-user-creation-page',\n  templateUrl: './user-creation-page.component.html',\n  styleUrls: ['./user-creation-page.component.scss']\n})\nexport class UserCreationPageComponent implements OnInit {\n  constructor(\n    private userService : UserManagementService,\n    private dialogService : MessageDialogService\n    ){\n\n  }\n\n  ngOnInit(): void {\n    this.fetchData()\n  }\n\n  users : User[] = []\n\n  fetchData(){\n    this.userService.getUsers().subscribe(users=> {\n      this.users = users\n    })\n  }\n\n  onCreate(user : UserCreationRequestBody){\n    this.userService.createUser(user).subscribe(result => {\n      if(result){\n        this.dialogService.openSuccessDialog(\"Operation successful.\", \"User has been created.\")\n      } else {\n        this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\n      }\n      this.fetchData();\n    })\n  }\n\n  onDelete(user : User){\n    const ref = this.dialogService.openChooseDialog(\"Delete user\", `Are you sure you want to delete user: ${user.email}${user.isAdmin ? \" (Admin)\" : \"\"}?`);\n    ref.afterClosed().subscribe(decision => {\n      if(decision){\n        this.userService.deleteUser(user.id).subscribe(result => {\n          if(result){\n            this.dialogService.openSuccessDialog(\"Operation successful.\", \"User has been deleted.\")\n          } else {\n            this.dialogService.openErrorDialog(\"Operation not successful.\", \"Please try again.\")\n          }\n          this.fetchData();\n        })\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n    margin: 2rem 2rem;\r\n}\r\n\r\n.users {\r\n    margin: 16px 16px;\r\n}\r\n\r\n.create {\r\n    margin: 16px 16px;\r\n}",
                    "styleUrl": "./user-creation-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MessageDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>User Management</h1>\n\n<div class=\"users\">\n    <div *ngFor=\"let user of users\">\n        <app-user-overview [user]=\"user\" (onDelete)=\"onDelete($event)\"></app-user-overview>\n    </div>    \n</div>\n<div class=\"create\">\n    <app-user-create (onCreate)=\"onCreate($event)\"></app-user-create>\n</div>\n"
        },
        {
            "name": "UserOverviewComponent",
            "id": "component-UserOverviewComponent-41370185db5a24ca68c7449256287ec30448217b99e819ab8390d765055613e1a5920b872290fbbf022d668196250a4f188614864dd32be7b6e1b2bbb2df3bb5",
            "file": "src/app/user-management/components/user-overview/user-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-overview",
            "styleUrls": [
                "./user-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "User | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<User>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { User } from 'src/app/data/dto/user.dto';\n\n@Component({\n  selector: 'app-user-overview',\n  templateUrl: './user-overview.component.html',\n  styleUrls: ['./user-overview.component.scss']\n})\nexport class UserOverviewComponent {\n  @Input() user : User | undefined\n\n  @Output() onDelete: EventEmitter<User> = new EventEmitter()\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-details {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    & > * {\r\n        margin-right: 8px;\r\n    }\r\n}",
                    "styleUrl": "./user-overview.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card *ngIf=\"user != null\">\n    <mat-card-content class=\"user-details\">\n        <div>\n            <mat-card-title>{{user.email}}</mat-card-title>\n            <mat-card-subtitle>Is Admin: {{user.isAdmin}}</mat-card-subtitle>\n        </div>\n        <button mat-icon-button (click)=\"onDelete.emit(user)\">\n            <mat-icon>delete</mat-icon>\n        </button>\n    </mat-card-content>\n</mat-card>"
        },
        {
            "name": "WelcomePageComponent",
            "id": "component-WelcomePageComponent-80ee5dced60b894ba1a55fe6658c9e7178415992f48fece13ecef5cda0e04fc40d76a11fc4fe44139546d49ae7149495194d9227ff1570fcc7eac401ddfb43f9",
            "file": "src/app/welcome/pages/welcome-page/welcome-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome-page",
            "styleUrls": [
                "./welcome-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome-page',\n  templateUrl: './welcome-page.component.html',\n  styleUrls: ['./welcome-page.component.scss']\n})\nexport class WelcomePageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".welcome {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n}",
                    "styleUrl": "./welcome-page.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"welcome\">\n    <h1>Welcome to FleetBrother!</h1>\n    <img src=\"/assets/logo.png\" style=\"height: 35vh;\">\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-313ac660be1fcec46a2d88e70939c57d5f7a28460a944f7be10e4bb34888000029679c79623c4fa30de053bac5fdf5292c73e9c80496d57230984daf3cee62a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, importProvidersFrom } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FleetManagementPageComponent } from './fleet-management/pages/fleet-management-page/fleet-management-page.component';\r\n\r\nimport { MaterialModule } from './shared/modules/material/material.module';\r\nimport { SidebarComponent } from './shared/components/sidebar/sidebar.component';\r\nimport { FleetManagementCreateComponent } from './fleet-management/components/fleet-management-create/fleet-management-create.component';\r\nimport { FleetOverviewComponent } from './fleet-management/components/fleet-overview/fleet-overview.component';\r\nimport { FleetViewPageComponent } from './fleet-management/pages/fleet-view-page/fleet-view-page.component';\r\nimport { CarAssigmentPageComponent } from './car-management/pages/car-assigment-page/car-assigment-page.component';\r\nimport { CarFleetAssigmentComponent } from './car-management/components/car-fleet-assigment/car-fleet-assigment.component';\r\nimport { CarOverviewComponent } from './car-management/components/car-overview/car-overview.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MessageDialogComponent } from './shared/components/message-dialog/message-dialog.component';\r\nimport { SchemaManagementPageComponent } from './schema-management/pages/schema-management-page/schema-management-page.component';\r\nimport { SchemaCreateComponent } from './schema-management/components/schema-create/schema-create.component';\r\nimport { SchemaOverviewComponent } from './schema-management/components/schema-overview/schema-overview.component';\r\nimport { FieldOverviewComponent } from './schema-management/components/field-overview/field-overview.component';\r\nimport { FieldCreationComponent } from './schema-management/components/field-creation/field-creation.component';\r\nimport { CarReportingPageComponent } from './car-reporting/pages/car-reporting-page/car-reporting-page.component';\r\nimport { SchemaCarAssigmentComponent } from './schema-management/components/schema-car-assigment/schema-car-assigment.component';\r\nimport { ReportComponent } from './car-reporting/components/report/report.component';\r\nimport { AlertsManagerComponent } from './car-reporting/components/alerts-manager/alerts-manager.component';\r\nimport { AlertOverviewComponent } from './car-reporting/components/alert-overview/alert-overview.component';\r\nimport { AlertCreationComponent } from './car-reporting/components/alert-creation/alert-creation.component';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { LoadingInterceptor } from './shared/interceptor/loading-interceptor';\r\nimport { UserCreationPageComponent } from './user-management/pages/user-creation-page/user-creation-page.component';\r\nimport { UserOverviewComponent } from './user-management/components/user-overview/user-overview.component';\r\nimport { UserCreateComponent } from './user-management/components/user-create/user-create.component';\r\nimport { LoginPageComponent } from './login/pages/login-page/login-page.component';\r\nimport { AuthGuard } from './shared/guards/auth.guard';\r\nimport { AuthInterceptor } from './shared/interceptor/auth.interceptor';\nimport { WelcomePageComponent } from './welcome/pages/welcome-page/welcome-page.component';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    FleetManagementPageComponent,\r\n    FleetManagementCreateComponent,\r\n    SidebarComponent,\r\n    FleetOverviewComponent,\r\n    FleetViewPageComponent,\r\n    CarAssigmentPageComponent,\r\n    CarFleetAssigmentComponent,\r\n    CarOverviewComponent,\r\n    MessageDialogComponent,\r\n    SchemaManagementPageComponent,\r\n    SchemaCreateComponent,\r\n    SchemaOverviewComponent,\r\n    FieldOverviewComponent,\r\n    FieldCreationComponent,\r\n    CarReportingPageComponent,\r\n    SchemaCarAssigmentComponent,\r\n    ReportComponent,\r\n    AlertsManagerComponent,\r\n    AlertOverviewComponent,\r\n    AlertCreationComponent,\r\n    UserCreationPageComponent,\r\n    UserOverviewComponent,\r\n    UserCreateComponent,\r\n    LoginPageComponent,\r\n    WelcomePageComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    FormsModule\r\n  ],\r\n  providers: [\r\n    importProvidersFrom(HttpClientModule),\r\n    { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "LoadingInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertCreationComponent"
                        },
                        {
                            "name": "AlertOverviewComponent"
                        },
                        {
                            "name": "AlertsManagerComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CarAssigmentPageComponent"
                        },
                        {
                            "name": "CarFleetAssigmentComponent"
                        },
                        {
                            "name": "CarOverviewComponent"
                        },
                        {
                            "name": "CarReportingPageComponent"
                        },
                        {
                            "name": "FieldCreationComponent"
                        },
                        {
                            "name": "FieldOverviewComponent"
                        },
                        {
                            "name": "FleetManagementCreateComponent"
                        },
                        {
                            "name": "FleetManagementPageComponent"
                        },
                        {
                            "name": "FleetOverviewComponent"
                        },
                        {
                            "name": "FleetViewPageComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "MessageDialogComponent"
                        },
                        {
                            "name": "ReportComponent"
                        },
                        {
                            "name": "SchemaCarAssigmentComponent"
                        },
                        {
                            "name": "SchemaCreateComponent"
                        },
                        {
                            "name": "SchemaManagementPageComponent"
                        },
                        {
                            "name": "SchemaOverviewComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "UserCreateComponent"
                        },
                        {
                            "name": "UserCreationPageComponent"
                        },
                        {
                            "name": "UserOverviewComponent"
                        },
                        {
                            "name": "WelcomePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-2204d9cf64ef64c8dae185af1c9027865efe7d9a1665720f995b39b75c72e1fd3babf733add229a0379354b75a04194352946c4a1ad583485c42572cd00dfc1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, inject } from '@angular/core';\r\nimport { RouterModule, Routes, provideRouter, withComponentInputBinding } from '@angular/router';\r\nimport { FleetManagementPageComponent } from './fleet-management/pages/fleet-management-page/fleet-management-page.component';\r\nimport { FleetViewPageComponent } from './fleet-management/pages/fleet-view-page/fleet-view-page.component';\r\nimport { CarAssigmentPageComponent } from './car-management/pages/car-assigment-page/car-assigment-page.component';\r\nimport { SchemaManagementPageComponent } from './schema-management/pages/schema-management-page/schema-management-page.component';\r\nimport { CarReportingPageComponent } from './car-reporting/pages/car-reporting-page/car-reporting-page.component';\r\nimport { UserCreationPageComponent } from './user-management/pages/user-creation-page/user-creation-page.component';\r\nimport { AuthGuard } from './shared/guards/auth.guard';\r\nimport { LoginPageComponent } from './login/pages/login-page/login-page.component';\r\nimport { AppComponent } from './app.component';\r\nimport { AdminGuard } from './shared/guards/admin.guard';\r\nimport { WelcomePageComponent } from './welcome/pages/welcome-page/welcome-page.component';\r\n\r\nconst routes: Routes = \r\n[\r\n  { \r\n    path: '',\r\n    component: WelcomePageComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  { \r\n    path: 'fleet', \r\n    component: FleetManagementPageComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  { \r\n    path: 'fleet/:id/details', \r\n    component: FleetViewPageComponent,\r\n    canActivate:  [AuthGuard]\r\n  },\r\n  { \r\n    path: 'newcomers', \r\n    component: CarAssigmentPageComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  { \r\n    path: 'schema', \r\n    component: SchemaManagementPageComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  { \r\n    path: 'report/:id', \r\n    component: CarReportingPageComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  { \r\n    path: 'users', \r\n    component: UserCreationPageComponent,\r\n    canActivate: [AdminGuard]\r\n  },\r\n  { \r\n    path: 'login', \r\n    component: LoginPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n  providers: [\r\n    provideRouter(routes, withComponentInputBinding()),\r\n  ]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-56edb831633a5ea13cee7436e1436d9bed2a604593191655575739aafdd7e0ecd2e3fd75e022b74f945ad5903b29fdcc2460f5eec4613e103d0fe69ce5681562",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// Material Form Controls\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n// Material Navigation\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n// Material Layout\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n// Material Buttons & Indicators\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n// Material Popups & Modals\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n// Material Data tables\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MatAutocompleteModule,\r\n    MatCheckboxModule,\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatBadgeModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatProgressBarModule,\r\n    MatRippleModule,\r\n    MatBottomSheetModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatTableModule\r\n  ],\r\n  exports: [\r\n    MatAutocompleteModule,\r\n    MatCheckboxModule,\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatBadgeModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatProgressBarModule,\r\n    MatRippleModule,\r\n    MatBottomSheetModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatTableModule\r\n  ]\r\n})\r\nexport class MaterialModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [],
        "functions": [
            {
                "name": "changeListsToString",
                "file": "src/app/shared/util/excel.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "o",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "o",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exportExcel",
                "file": "src/app/shared/util/excel.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filename",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filename",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "saveAsExcelFile",
                "file": "src/app/shared/util/excel.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "buffer",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "buffer",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Alert",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert",
                "file": "src/app/data/dto/alert.dto.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AlertCreationRequestBody",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody",
                "file": "src/app/data/requestbody/alert-creation.dto.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "AlertType",
                "childs": [
                    {
                        "name": "MIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "min"
                    },
                    {
                        "name": "MAX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "max"
                    },
                    {
                        "name": "FORBIDDEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forbidden"
                    },
                    {
                        "name": "EXISTS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exists"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/car-reporting/components/alert-creation/alert-creation.component.ts"
            },
            {
                "name": "CarOverviewMode",
                "childs": [
                    {
                        "name": "ACCEPT_DECLINE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MANAGE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "REPORT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DISPLAY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/car-management/components/car-overview/car-overview.component.ts"
            },
            {
                "name": "FieldType",
                "childs": [
                    {
                        "name": "NUMBER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "STRING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "string"
                    },
                    {
                        "name": "BOOLEAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boolean"
                    },
                    {
                        "name": "LIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/data/dto/field.dto.ts"
            }
        ],
        "groupedVariables": {},
        "groupedFunctions": {
            "src/app/shared/util/excel.util.ts": [
                {
                    "name": "changeListsToString",
                    "file": "src/app/shared/util/excel.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "o",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportExcel",
                    "file": "src/app/shared/util/excel.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveAsExcelFile",
                    "file": "src/app/shared/util/excel.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "buffer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "buffer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/car-reporting/components/alert-creation/alert-creation.component.ts": [
                {
                    "name": "AlertType",
                    "childs": [
                        {
                            "name": "MIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "min"
                        },
                        {
                            "name": "MAX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "max"
                        },
                        {
                            "name": "FORBIDDEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forbidden"
                        },
                        {
                            "name": "EXISTS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exists"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/car-reporting/components/alert-creation/alert-creation.component.ts"
                }
            ],
            "src/app/car-management/components/car-overview/car-overview.component.ts": [
                {
                    "name": "CarOverviewMode",
                    "childs": [
                        {
                            "name": "ACCEPT_DECLINE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MANAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "REPORT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DISPLAY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/car-management/components/car-overview/car-overview.component.ts"
                }
            ],
            "src/app/data/dto/field.dto.ts": [
                {
                    "name": "FieldType",
                    "childs": [
                        {
                            "name": "NUMBER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "STRING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "string"
                        },
                        {
                            "name": "BOOLEAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boolean"
                        },
                        {
                            "name": "LIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/data/dto/field.dto.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/data/dto/alert.dto.ts": [
                {
                    "name": "Alert",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "MinValueAlert | MaxValueAlert | ForbiddenValueAlert | ExistsValueAlert",
                    "file": "src/app/data/dto/alert.dto.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/data/requestbody/alert-creation.dto.ts": [
                {
                    "name": "AlertCreationRequestBody",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "MinValueAlertCreationRequestBody | MaxValueAlertCreationRequestBody | ForbiddenValueAlertCreationRequestBody | ExistsValueAlertCreationRequestBody",
                    "file": "src/app/data/requestbody/alert-creation.dto.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "WelcomePageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "fleet",
                        "component": "FleetManagementPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "fleet/:id/details",
                        "component": "FleetViewPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "newcomers",
                        "component": "CarAssigmentPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "schema",
                        "component": "SchemaManagementPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "report/:id",
                        "component": "CarReportingPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "users",
                        "component": "UserCreationPageComponent",
                        "canActivate": [
                            "AdminGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/car-management/components/car-fleet-assigment/car-fleet-assigment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarFleetAssigmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/car-management/components/car-overview/car-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/car-management/pages/car-assigment-page/car-assigment-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarAssigmentPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/car-reporting/components/alert-creation/alert-creation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertCreationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/car-reporting/components/alert-overview/alert-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/car-reporting/components/alerts-manager/alerts-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertsManagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/car-reporting/components/report/report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/car-reporting/pages/car-reporting-page/car-reporting-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarReportingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/alert.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlertBase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/alert.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExistsValueAlert",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/alert.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForbiddenValueAlert",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/alert.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MaxValueAlert",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/alert.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinValueAlert",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/car.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Car",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/field.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Field",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/fleet.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Fleet",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/login.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/measurement.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Measurement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/schema.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Schema",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/dto/user.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/alert-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlertCreationRequestBodyBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/alert-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExistsValueAlertCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/alert-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForbiddenValueAlertCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/alert-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MaxValueAlertCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/alert-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinValueAlertCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/field-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FieldCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/fleet-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FleetCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/schema-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SchemaCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/requestbody/user-creation.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserCreationRequestBody",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/fleet-management/components/fleet-management-create/fleet-management-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FleetManagementCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/fleet-management/components/fleet-overview/fleet-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FleetOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/fleet-management/pages/fleet-management-page/fleet-management-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FleetManagementPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/fleet-management/pages/fleet-view-page/fleet-view-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FleetViewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/login/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/field-creation/field-creation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldCreationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/field-overview/field-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaCarAssigmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/schema-car-assigment/schema-car-assigment.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SchemaCarAssigmentOutput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/schema-create/schema-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/components/schema-overview/schema-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/schema-management/pages/schema-management-page/schema-management-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaManagementPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/message-dialog/message-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptor/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptor/loading-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/alerts-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlertsManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/car-reporting.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CarReportingService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/firebase.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirebaseService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/fleet-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FleetManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/message-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/schema-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemaManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/excel.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "changeListsToString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/excel.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "exportExcel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/excel.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "saveAsExcelFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/user-management/components/user-create/user-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/user-management/components/user-overview/user-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user-management/pages/user-creation-page/user-creation-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCreationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/welcome/pages/welcome-page/welcome-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}